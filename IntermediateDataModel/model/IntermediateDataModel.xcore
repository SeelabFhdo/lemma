@Ecore(nsURI="http://www.fhdo.de/ddmm/data/intermediate", nsPrefix="intermediate")
package de.fhdo.ddmm.data.intermediate

import de.fhdo.ddmm.service.ImportType

/**
 * Metamodel of intermediate data models.
 *
 * @author <a href="mailto:florian.rademacher@fh-dortmund.de">Florian Rademacher</a>
 */

class IntermediateDataModel {
    // "file://" URI to the source model from which this intermediate model was derived
    String sourceModelUri

    contains IntermediateImport[] imports opposite dataModel
    contains IntermediateVersion[] versions opposite dataModel
    contains IntermediateContext[] contexts opposite dataModel
    contains IntermediateComplexType[] complexTypes opposite dataModel
}

/**
 * Import
 */
class IntermediateImport {
    String name
    String importUri
    // Note that this would normally be a field of type de.fhdo.ddmm.service.ImportType. However,
    // the XMI serializer seems to refuse to write the first constant of an enum (DATATYPES in this
    // case) to the target file. This seems to be a bug. However, we don't want to extend the source
    // metamodel with a dummy constant to not bloat it with even more "transformation-only"
    // information. That is, we use the name of the ImportType instead here, i.e., "DATATYPES"
    // instead of ImportType.DATATYPES.
    String importTypeName

    container IntermediateDataModel dataModel opposite imports

    /**
     * Helper to return the String representation of the DATATYPES ImportType enum constant in a
     * type-safe way. This is necessary to cope with the bug in the XMI serializer (see above).
     */
    derived String importTypeNameForDatatypes get {
        ImportType.DATATYPES.literal
    }
}

class IntermediateVersion {
    String name

    contains IntermediateComplexType[] complexTypes opposite version
    contains IntermediateContext[] contexts opposite version

    container IntermediateDataModel dataModel opposite versions
}

class IntermediateContext {
    String name
    String qualifiedName

    contains IntermediateComplexType[1..*] complexTypes opposite context

    container IntermediateDataModel dataModel opposite contexts
    container IntermediateVersion version opposite contexts
}

/**
 * Data type kind
 */
enum IntermediateTypeKind {
    // Dummy constant due to XMI serializer bug (see comments in Import concept)
    DUMMY_FOR_XMI_SERIALIZER_BUG,
    LIST,
    PRIMITIVE,
    STRUCTURE
}

/**
 * Origin of a data type
 */
enum IntermediateTypeOrigin {
    // Dummy constant due to XMI serializer bug (see comments in Import concept)
    DUMMY_FOR_XMI_SERIALIZER_BUG,
    DATA_MODEL,
    BUILTIN,
    TECHNOLOGY
}

/**
 * Intermediate concept for any possible type in the context of the languages, i.e., it may be of
 * one of the kinds primitive, list, or data structure, and one of the origins built-in, data model,
 * technology. Note that currently only the following combinations are possible:
 *      kind                origins
 *      primitive           built-in, technology
 *      list                data model, technology
 *      data structure      data model, technology
 * However, code generators should not depend on these combinations.
 */
abstract class IntermediateType {
    String name
    IntermediateTypeOrigin origin
    IntermediateTypeKind kind

    container IntermediateDataField dataField opposite ^type
}

/**
 * Primitive type
 */
class IntermediatePrimitiveType extends IntermediateType {
    Integer size
}

/**
 * Complex type
 */
class IntermediateComplexType extends IntermediateType {
    String qualifiedName

    container IntermediateDataModel dataModel opposite complexTypes
    container IntermediateVersion version opposite complexTypes
    container IntermediateContext context opposite complexTypes
}

/**
 * Imported complex type
 */
class IntermediateImportedComplexType extends IntermediateComplexType {
    refers IntermediateImport ^import
}

/**
 * Data structure
 */
class IntermediateDataStructure extends IntermediateComplexType {
    refers IntermediateDataStructure ^super
    contains IntermediateDataField[] dataFields opposite dataStructure
}

/**
 * List type
 */
class IntermediateListType extends IntermediateComplexType {
    boolean primitiveList
    boolean structuredList

    contains IntermediatePrimitiveType[0..1] primitiveType
    contains IntermediateDataField[] dataFields opposite listType
}

/**
 * Data field
 */
class IntermediateDataField {
    String name
    String qualifiedName
    boolean hidden
    boolean ^derived

    contains IntermediateType ^type opposite dataField

    container IntermediateDataStructure dataStructure opposite dataFields
    container IntermediateListType listType opposite dataFields
}
