import microservices from "Order.services" as OrderServices
import technology from "../TechnologyModels/Java.technology" as Java
import technology from "../TechnologyModels/Kafka.technology" as Kafka
import technology from "../TechnologyModels/Spring.technology" as Spring

@technology(Java)
type OrderServices::OrderDomain::Order.Order {
    aspects {
        Java::_aspects.Table("orders");
        Java::_aspects.Access;
    }

    ^version { aspects { Java::_aspects.Version; } }

    state { aspects { Java::_aspects.Enumerated; } }
}

@technology(Java)
type OrderServices::Common::Money {
    amount : Java::_types.BigDecimal;
}

@technology(Java)
type OrderServices::OrderDomain::Order.OrderLineItem {
    price {
        aspects {
            Java::_aspects.Embedded;
            Java::_aspects.AttributeOverride(name="amount", column="price");
        }
    }
}

@technology(Spring)
type OrderServices::OrderDomain::Order.OrderService {
    aspects { Spring::_aspects.Transactional; }
}

@technology(Java)
@technology(Kafka)
@technology(Spring)
OrderServices::org.example.OrderService {
    protocols {
        sync: Spring::_protocols.rest
        async: Kafka::_protocols.kafka
    }

	aspects {
		Kafka::_aspects.BootstrapAddress("localhost:9092");
	}

    interface Orders {
        endpoints {	Spring::_protocols.rest: "/orders"; }
    }

    operation Orders.create { aspects { Spring::_aspects.Post; } }

    operation Orders.getOrder {
        endpoints {	Spring::_protocols.rest: "/{orderId}"; }

        aspects { Spring::_aspects.Get;	}

        parameters {
            primitive orderId { aspects { Spring::_aspects.PathVariable; } }
            complex response { aspects { Spring::_aspects.ResponseEntity; } }
        }
    }

    operation Orders.cancel {
        endpoints {	Spring::_protocols.rest: "/{orderId}/cancel"; }

        aspects { Spring::_aspects.Post; }

        parameters {
            primitive orderId { aspects { Spring::_aspects.PathVariable; } }
            complex response { aspects { Spring::_aspects.ResponseEntity; } }
            primitive notFound { aspects { Spring::_aspects.HttpNotFound; } }
        }
    }

    operation OrderEventConsumer.listenCreateMenu {
        aspects {
            Kafka::_aspects.KafkaListener(group = "ftgo", topic = "ftgoTopic");
        }
    }
}