import microservices from "Order.services" as OrderServices
import technology from "../TechnologyModels/Docker.technology" as Docker
import technology from "../TechnologyModels/Kafka.technology" as Kafka
import technology from "../TechnologyModels/MySQL.technology" as MySQL
import technology from "../TechnologyModels/Spring.technology" as Spring

@technology(Docker)
@technology(Spring)
container OrderServiceContainer deployment technology Docker::_deployment.Docker
    deploys OrderServices::org.example.OrderService {
    OrderServices::org.example.OrderService {
        Dockerfile = '
            RUN apk --no-cache add curl
			CMD java ${JAVA_OPTS} -jar ftgo-order-service.jar
			HEALTHCHECK --start-period=30s --interval=5s
				CMD curl -f http://localhost:8080/actuator/health || exit 1
			COPY build/libs/ftgo-order-service.jar .
        '

        basic endpoints {
            Spring::_protocols.rest: "8082:8080";
        }
    }
}

@technology(MySQL)
MySQL is MySQL::_infrastructure.MySQL used by nodes OrderServiceContainer {
    default values {
        rootPassword = "rootpassword"
        mySqlUser = "mysqluser"
        mySqlPassword = "mysqlpw"
    }
    endpoints {
        MySQL::_protocols.connectorJ: "3306:3306";
    }
}

@technology(Kafka)
KafkaServer is Kafka::_infrastructure.Kafka used by nodes OrderServiceContainer {
    default values {
        zooKeeperServer = "ZooKeeper:2181"
    }

    endpoints {
        Kafka::_protocols.kafka: "9092:9092";
    }
}

@technology(Kafka)
ZooKeeper is Kafka::_infrastructure.ZooKeeper used by nodes KafkaServer {
    endpoints {
        Kafka::_protocols.zookeeper: "2181:2181", "2888:2888", "3888:3888";
    }
}