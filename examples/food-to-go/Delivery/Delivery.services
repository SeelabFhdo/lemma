import datatypes from "../Common/Common.data" as Common
import datatypes from "Delivery.data" as DeliveryDomain
import datatypes from "DeliveryAPI.data" as DeliveryAPI

import microservices from "../Kitchen/Kitchen.services" as Kitchen
import datatypes from "../Kitchen/KitchenAPI.data" as KitchenAPI

import microservices from "../Order/Order.services" as Order
import datatypes from "../Order/OrderAPI.data" as OrderAPI

import microservices from "../Restaurant/Restaurant.services" as Restaurant
import datatypes from "../Restaurant/RestaurantAPI.data" as RestaurantAPI
import datatypes from "../Restaurant/Restaurant.data" as RestaurantDomain

import technology from "../TechnologyModels/Java.technology" as Java
import technology from "../TechnologyModels/Spring.technology" as Spring
import technology from "../TechnologyModels/Eventuate.technology" as Event

@technology(Java)
@technology(Spring)
@technology(Event)
functional microservice org.example.DeliveryService {
    required microservices {
        Kitchen::org.example.KitchenService,
        Order::org.example.OrderService,
        Restaurant::org.example.RestaurantService
    }

    // derived from DeliveryMessageHandlers.java
    @async(Event::_protocols.eventuate)
    interface DeliveryMessageHandlers {
        @endpoints(Event::_protocols.eventuate: "net.chrisrichardson.ftgo.restaurantservice.domain.Restaurant";)
        handleRestaurantCreated(@Event::_aspects.DomainEventEnvelope async in dee : RestaurantDomain::API.RestaurantCreated);

        @endpoints(Event::_protocols.eventuate: "net.chrisrichardson.ftgo.orderservice.domain.Order";)
        handleOrderCreatedEvent(@Event::_aspects.DomainEventEnvelope async in dee : OrderAPI::Events.OrderCreatedEvent);

        @endpoints(Event::_protocols.eventuate: "net.chrisrichardson.ftgo.kitchenservice.domain.Ticket";)
        handleTicketAcceptedEvent(@Event::_aspects.DomainEventEnvelope async in dee : KitchenAPI::Events.TicketAcceptedEvent);

        @endpoints(Event::_protocols.eventuate: "net.chrisrichardson.ftgo.kitchenservice.domain.Ticket";)
        handleTicketCancelledEvent(@Event::_aspects.DomainEventEnvelope async in dee : KitchenAPI::Events.TicketCancelled);
    }

    @sync(Spring::_protocols.rest)
    interface Deliveries {
        ---
        Update Courier Location
        @required courierId id of courier
        @required availability availability of courier
        ---
        @endpoints(Spring::_protocols.rest: "/couriers/{courierId}/availability";)
        @Spring::_aspects.Post
        updateCourierLocation(
            @Spring::_aspects.PathVariable sync in courierId : long,
            @Spring::_aspects.RequestBody sync in availability : DeliveryAPI::Web.CourierAvailability
        );

        ---
        Get Delivery Status
        @required deliveryId ID of the delivery to retrieve
        ---
        @endpoints(Spring::_protocols.rest: "/deliveries/{deliveryId}";)
        @Spring::_aspects.Get
        getDeliveryStatus(
            @Spring::_aspects.PathVariable
            sync in deliveryId : long,

            @Spring::_aspects.ResponseEntity
            sync out response : DeliveryAPI::Web.DeliveryStatus
        );
    }
}
