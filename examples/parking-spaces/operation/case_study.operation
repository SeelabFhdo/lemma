import technology from "../technology/java.technology" as java
import technology from "../technology/python.technology" as python
import technology from "../technology/shared.technology" as shared
import technology from "../technology/deployment_base.technology" as deploymentBase
import microservices from "../microservices/case_study.services" as ^services
import nodes from "eureka.operation" as eureka
import nodes from "zuul.operation" as zuul

/* Containers */
// Current allocation
@technology(java)
@technology(shared)
@technology(deploymentBase)
container CurrentAllocation deployment technology deploymentBase::_deployment.Kubernetes
deploys ^services::com.example.allocationsovertime.AllocationsOverTime
depends on nodes eureka::Eureka, zuul::Zuul {
    default values {
        springApplicationName="CurrentAllocationService"
        serverPort=8080
        basic endpoints {
            shared::_protocols.amqp: "amqp://example.com:5672/ca";
            shared::_protocols.rest: "http://example.com:8080/ca";
        }
    }
}

// Search for free space
@technology(java)
@technology(shared)
@technology(deploymentBase)
container SearchForFreeSpace deployment technology deploymentBase::_deployment.Kubernetes
deploys ^services::com.example.searchforfreespace.SearchForFreeSpace
depends on nodes eureka::Eureka, zuul::Zuul {
    default values {
        springApplicationName="SearchForFreeSpaceService"
        serverPort=8080
        basic endpoints {
            shared::_protocols.rest: "http://example.com:8080/sfs";
        }
    }
}

// Allocations over time
@technology(python)
@technology(shared)
@technology(deploymentBase)
container AllocationsOverTime deployment technology deploymentBase::_deployment.Kubernetes
deploys ^services::com.example.allocationsovertime.AllocationsOverTime
depends on nodes eureka::Eureka, zuul::Zuul {
    default values {
        springApplicationName="AllocationsOverTimeService"
        serverPort=8080
        basic endpoints {
            shared::_protocols.amqp: "amqp://example.com:5672/aot";
            shared::_protocols.rest: "http://example.com:8080/aot";
        }
    }
}

// Parking space management
@technology(java)
@technology(shared)
@technology(deploymentBase)
container ParkingSpaceManagement deployment technology deploymentBase::_deployment.Kubernetes
deploys ^services::com.example.parkingspacemanagement.ParkingSpaceManagement
depends on nodes eureka::Eureka, zuul::Zuul {
    default values {
        springApplicationName="ParkingSpaceManagementService"
        serverPort=8080
        basic endpoints {
            shared::_protocols.amqp: "amqp://example.com:5672/psm";
            shared::_protocols.rest: "http://example.com:8080/psm";
        }
    }
}

// Data export
@technology(java)
@technology(shared)
@technology(deploymentBase)
container DataExport deployment technology deploymentBase::_deployment.Kubernetes
deploys ^services::com.example.dataexport.DataExport
depends on nodes eureka::Eureka, zuul::Zuul {
    default values {
        springApplicationName="ParkingSpaceManagementService"
        serverPort=8080
        basic endpoints {
            shared::_protocols.soap: "http://example.com:8080/dex";
        }
    }
}