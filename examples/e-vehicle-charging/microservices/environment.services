import datatypes from "../domain/environment.data" as enviromentData
import microservices from "infrastructure.services" as infrastructureServices
/*
 * Import of a technology model, which defines service-related technology. Please note that this is
 * part of our current work in implementing technology models to separate the service functionality
 * from the service technology concern and make technology definitions reusable across microservices
 * and operation nodes. The imported model is assigned to Microservice instances with the
 * "@technology" annotation.
 */
import technology from "../technology/go.technology" as go
import technology from "../technology/shared.technology" as shared

// The EnvironmentService is responsible for the display and aggregation of sensor data
@technology(go)
@technology(shared)
@endpoints(shared::_protocols.rest, shared::_protocols.mqtt : "/environment";)
public functional microservice de.fhdo.EnvironmentService version v01 {
    /*
     * The infrastructure microservices are required for the provisioning of cross-cutting concerns,
     * e.g., scalability and reliability.
     */
    required microservices {
        infrastructureServices::v01.de.fhdo.APIGateways,
        infrastructureServices::v01.de.fhdo.DiscoveryService,
        infrastructureServices::v01.de.fhdo.SecurityService
    }

    // The EnvironmentSensorInterface is responsible for receiving sensor data information
    @endpoints(shared::_protocols.mqtt: "/sensor/";)
    interface EnvironmentSensorInterface {
        @endpoints (shared::_protocols.mqtt: "/receive";)
        receiveSensorData(
            async in rawSensorData : enviromentData::v01.EnvironmentalSensors.RawSensorData
        );
    }

    // The EnvironmentDataInterface interface is providing sensor data to its consumers
    @endpoints(shared::_protocols.rest: "/data";)
    interface EnvironmentDataInterface {
        // Provides data aggregated by sensors
        @endpoints(shared::_protocols.rest: "/sensordata/{sensorId}";)
        readSensorData(
            sync in sensorId : string,
            sync out SensorData : enviromentData::v01.EnvironmentalSensors.RawSensorData
        );

        // Provides sensor data aggregated by quarters
        @endpoints(shared::_protocols.rest: "/quarterdata/{quarterId}";)
        readQuarterData(
            sync in quarterId : string,
            sync out quarterData : enviromentData::v01.EnvironmentData.Quarter
        );

        // Provides sensor data aggregated by city's
        @endpoints(shared::_protocols.rest: "/citydata/{cityId}";)
        readCityData(
            sync in cityId : string,
            sync out cityData : enviromentData::v01.EnvironmentData.city
        );
    }
}