// automatically generated by Xtext
grammar de.fhdo.lemma.technology.mappingdsl.MappingDsl with de.fhdo.lemma.ServiceDsl

import "de.fhdo.lemma.technology.mapping"
import "de.fhdo.lemma.service" as service
import "de.fhdo.lemma.technology" as technology
import "de.fhdo.lemma.data" as data
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

TechnologyMapping returns TechnologyMapping:
    imports+=Import+
    typeMappings+=ComplexTypeMapping*
    serviceMappings+=MicroserviceMapping*
;

@Override
enum ImportType returns service::ImportType:
    TECHNOLOGY='technology' | MICROSERVICES='microservices'
;

ComplexTypeMapping returns ComplexTypeMapping:
    (technologyReferences+=TechnologyReference)*
    'type' type=ImportedComplexTypeToMap '{'
        ('aspects' '{'
            aspects+=TechnologySpecificImportedServiceAspect+
        '}')?

        fieldMappings+=TechnologySpecificFieldMapping*
        operationMappings+=DataOperationMapping*
    '}'
;

ImportedComplexTypeToMap returns ImportedComplexTypeToMap:
    serviceModelImport=[service::Import] '::'
    dataModelImport=[service::Import] '::'
    type=[data::ComplexType|QualifiedName]
;

MicroserviceMapping returns MicroserviceMapping:
    (technologyReferences+=TechnologyReference)*
    microservice=ImportedMicroservice '{'
        ('protocols' '{'
            protocols+=TechnologySpecificProtocolSpecification+
        '}')?

        ('endpoints' '{'
            endpoints+=TechnologySpecificEndpoint*
        '}')?

        ('aspects' '{'
            aspects+=TechnologySpecificImportedServiceAspect+
        '}')?

        interfaceMappings+=InterfaceMapping*
        referredOperationMappings+=ReferredOperationMapping*
        operationMappings+=OperationMapping*
    '}'
;

InterfaceMapping returns InterfaceMapping:
    'interface' interface=[service::Interface|QualifiedName] '{'
        ('protocols' '{'
            protocols+=TechnologySpecificProtocolSpecification+
        '}')?

        ('endpoints' '{'
            endpoints+=TechnologySpecificEndpoint+
        '}')?

        ('aspects' '{'
            aspects+=TechnologySpecificImportedServiceAspect+
        '}')?
    '}'
;

OperationMapping returns OperationMapping:
    'operation' operation=[service::Operation|QualifiedName] '{'
        ('protocols' '{'
            protocols+=TechnologySpecificProtocolSpecification+
        '}')?

        ('endpoints' '{'
            endpoints+=TechnologySpecificEndpoint+
        '}')?

        ('aspects' '{'
            aspects+=TechnologySpecificImportedServiceAspect+
        '}')?

        ('parameters' '{'
            parameterMappings+=(PrimitiveParameterMapping | ComplexParameterMapping)+
        '}')?
    '}'
;

ReferredOperationMapping returns ReferredOperationMapping:
    'referred' 'operation' operation=[service::ReferredOperation|QualifiedName] '{'
        ('protocols' '{'
            protocols+=TechnologySpecificProtocolSpecification+
        '}')?

        ('endpoints' '{'
            endpoints+=TechnologySpecificEndpoint+
        '}')?

        ('aspects' '{'
            aspects+=TechnologySpecificImportedServiceAspect+
        '}')?
    '}'
;

PrimitiveParameterMapping returns PrimitiveParameterMapping:
    'primitive' parameter=[service::Parameter]
    (
     ':' technology=[service::Import] '::'
     primitiveType=[technology::TechnologySpecificPrimitiveType|QualifiedName]
    )?
    (
        '{'
            'aspects' '{'
                aspects+=TechnologySpecificImportedServiceAspect+
            '}'
        '}'
    |
        ';'
    )
;

ComplexParameterMapping returns ComplexParameterMapping:
    'complex' parameter=[service::Parameter]
        (
            (
                (
                  ':' technology=[service::Import] '::'
                  technologySpecificComplexType=[data::ComplexType|QualifiedName]
                )?
                (
                    '{'
                        'aspects' '{'
                            aspects+=TechnologySpecificImportedServiceAspect+
                        '}'
                    '}'
                |
                    ';'
                )
            )
            |
            ('->' '{'
                ('aspects' '{'
                    aspects+=TechnologySpecificImportedServiceAspect+
                '}')?

                fieldMappings+=TechnologySpecificFieldMapping+
            '}')
        )
;

TechnologySpecificFieldMapping returns TechnologySpecificFieldMapping:
    (
        '.' enumerationField=[data::EnumerationField]
        '{'
            'aspects' '{'
                aspects+=TechnologySpecificImportedServiceAspect+
            '}'
        '}'
    )

    |

    (
        dataField=[data::DataField]
        (':' technology=[service::Import] '::' type=[data::Type|QualifiedName])?

        (
            '{'
                'aspects' '{'
                    aspects+=TechnologySpecificImportedServiceAspect+
                '}'
            '}'
            |
            ';'
        )
    )
;

DataOperationMapping returns DataOperationMapping:
    'op' dataOperation=[data::DataOperation]
    (
        ('{'
            ('aspects' '{'
                aspects+=TechnologySpecificImportedServiceAspect+
            '}')?

            ('return' 'type' returnTypeMapping=DataOperationReturnTypeMapping)?

            ('parameters' '{'
                parameterMappings+=DataOperationParameterMapping+
            '}')?
        '}')
        |
        ';'
    )
;

DataOperationReturnTypeMapping returns DataOperationReturnTypeMapping:
    {DataOperationReturnTypeMapping}
    (
        ':' technology=[service::Import] '::'
        type=[data::Type|QualifiedName]
    )?
    (
        '{'
            'aspects' '{'
                aspects+=TechnologySpecificImportedServiceAspect+
            '}'
        '}'
    |
        ';'
    )
;


DataOperationParameterMapping returns DataOperationParameterMapping:
    parameter=[data::DataOperationParameter]
    (
        ':' technology=[service::Import] '::'
        type=[data::Type|QualifiedName]
    )?
    (
        '{'
            'aspects' '{'
                aspects+=TechnologySpecificImportedServiceAspect+
            '}'
        '}'
    |
        ';'
    )
;

ImportedMicroservice returns ImportedMicroservice:
    ^import=[service::Import] '::'
    microservice=[service::Microservice|QualifiedNameWithAtLeastOneLevel]
;

TechnologySpecificProtocolSpecification returns TechnologySpecificProtocolSpecification:
    communicationType=CommunicationType ':'
    technologySpecificProtocol=TechnologySpecificProtocol
;

TechnologySpecificProtocol returns TechnologySpecificProtocol:
    technology=[service::Import] '::'
    protocol=[technology::Protocol|QualifiedName]
    ('/' dataFormat=[technology::DataFormat])?
;

TechnologySpecificEndpoint returns TechnologySpecificEndpoint:
    technologySpecificProtocols+=TechnologySpecificProtocol
    (',' technologySpecificProtocols+=TechnologySpecificProtocol)* ':'
    addresses+=STRING (',' addresses+=STRING)* ';'
;

TechnologySpecificImportedServiceAspect returns TechnologySpecificImportedServiceAspect:
    technology=[service::Import] '::' aspect=[technology::ServiceAspect|QualifiedName]
    (
        '('
            (
                singlePropertyValue=PrimitiveValue
                    |
                (values+=PropertyValueAssignment (',' values+=PropertyValueAssignment)*)
            )
        ')'
    )?
    ';'
;

// Change overridden STRING terminal rule back to single-quote support (cf. the grammar of the
// Service DSL)
@Override
terminal STRING:
    '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
    "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
;