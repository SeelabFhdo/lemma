package de.fhdo.lemma.operation

import de.fhdo.lemma.data.PrimitiveValue
import de.fhdo.lemma.service.Import
import de.fhdo.lemma.service.Microservice
import de.fhdo.lemma.technology.DataFormat
import de.fhdo.lemma.technology.DeploymentTechnology
import de.fhdo.lemma.technology.InfrastructureTechnology
import de.fhdo.lemma.technology.OperationAspect
import de.fhdo.lemma.technology.OperationEnvironment
import de.fhdo.lemma.technology.Protocol
import de.fhdo.lemma.technology.TechnologySpecificPropertyValueAssignment

/**
 * This metamodel represents the Operation Modeling Viewpoint, which is used for specifying
 * services' operation.
 *
 * @author <a href="mailto:florian.rademacher@fh-dortmund.de">Florian Rademacher</a>
 */
class OperationModel {
    /**
     * Implicit Constraints:
     *     (C1) Model must contain at least one container or infrastructure node.
     *          Ensured by: DSL validator.
     */
    String t_modelUri

    contains Import[1..*] imports
    contains Container[] containers opposite operationModel
    contains InfrastructureNode[] infrastructureNodes opposite operationModel
}

/**
 * An operation node is a node to which services may be deployed, e.g., a container or some
 * infrastructure component like a configuration provider
 */
abstract class OperationNode {
    /**
     * Implicit Constraints:
     *     (C1) Mandatory service properties need to have values assigned.
     *          Ensured by: DSL validator.
     *     (C2) Depending on the concrete type of the operation node, service properties must
     *          correspond to those defined in the deployment technology (for containers) or the
     *          infrastructure technology (for infrastructure nodes).
     *          Ensured by: DSL scope provider.
     *     (C3) Services in service deployment specifications must correspond to those being
     *          deployed to the operation node.
     *          Ensured by: DSL scope provider.
     *     (C4) The operation environment must be defined in the assigned deployment technology
     *          (for containers) or infrastructure technology (for infrastructure nodes).
     *          Ensured by: DSL scope provider.
     *     (C5) There might exactly be one deployment specification per service.
     *          Ensured by: DSL validator.
     *     (C6) Deployed services must be unique.
     *          Ensured by: DSL validator.
     *     (C6) Each service property might receive a value once.
     *          Ensured by: DSL validator.
     *     (C7) A technology might be assigned exactly once to an operation node.
     *          Ensured by: DSL validator.
     *     (C8) Assigned technologies may not only define service-specific concepts.
     *          Ensured by: DSL validator.
     */

    String name

    refers Import[1..*] technologies
    refers OperationEnvironment operationEnvironment
    contains ImportedMicroservice[*] deployedServices opposite operationNode
    contains TechnologySpecificPropertyValueAssignment[] defaultServicePropertyValues
    contains ServiceDeploymentSpecification[] deploymentSpecifications opposite operationNode
    contains ImportedOperationAspect[] aspects opposite operationNode
    contains PossiblyImportedOperationNode[] usedByNodes
    contains PossiblyImportedOperationNode[] dependsOnNodes

    op String[] getQualifiedNameParts() {
        if (name === null || name.empty)
            return newArrayList.asEList

        val nameParts = newArrayList
        nameParts.addAll(name)
        nameParts.asEList
    }
}

/**
 * A container is the central operation node. It enables service deployment and operation.
 */
class Container extends OperationNode {
    /**
     * Implicit Constraints:
     *     (C1) Protocols of basic endpoints must correspond to those defined in the technology
     *          being assigned to the operation node.
     *          Ensured by: DSL scope provider.
     *     (C2) The deployment technology must be one defined in the technology assigned to the
     *          operation node.
     *          Ensured by: DSL scope provider.
     *     (C3) Endpoints must be unique for protocol and data format combination.
     *          Ensured by: DSL validator.
     *     (C4) Each deployed service needs to have a basic endpoint assigned, either via a default
     *          endpoint or a service-specific endpoint, for each protocol/data format combination
     *          in the technology being assigned to the operation node.
     *          Ensured by: DSL validator.
     */

    contains DeploymentTechnologyReference deploymentTechnology opposite ^container
    contains BasicEndpoint[] defaultBasicEndpoints opposite ^container

    container OperationModel operationModel opposite containers
}

/**
 * Reference to a deployment technology
 */
class DeploymentTechnologyReference {
    refers Import ^import
    refers DeploymentTechnology deploymentTechnology

    container Container ^container opposite deploymentTechnology
}

/**
 * An infrastructure node is an operation node with supporting character, e.g., a configuration
 * provider
 */
class InfrastructureNode extends OperationNode {
    /**
     * Implicit Constraints:
     *     (C1) Protocols of endpoints must correspond to those defined in the technology being
     *          assigned to the operation node.
     *          Ensured by: DSL scope provider.
     *     (C2) The infrastructure technology must be one defined in the technology assigned to the
     *          operation node.
     *          Ensured by: DSL scope provider.
     *     (C3) Endpoints must be unique for protocol and data format combination.
     *          Ensured by: DSL validator.
     *     (C4) Nodes using this node must be unique.
     *          Ensured by: DSL validator.
     *     (C5) Nodes on which this node depends must be unique.
     *          Ensured by: DSL validator.
     *     (C6) The infrastructure node must exhibit at least one deployed service, being used by at
     *          least one node, or another node must depend on it.
     *          Ensured by: DSL validator.
     */

    contains InfrastructureTechnologyReference infrastructureTechnology opposite infrastructureNode
    contains BasicEndpoint[] endpoints opposite infrastructureNode

    container OperationModel operationModel opposite infrastructureNodes
}

/**
 * Reference to an infrastructure technology
 */
class InfrastructureTechnologyReference {
    refers Import ^import
    refers InfrastructureTechnology infrastructureTechnology

    container InfrastructureNode infrastructureNode opposite infrastructureTechnology
}

/**
 * Represents an imported microservice
 */
class ImportedMicroservice {
    refers Import ^import
    refers Microservice microservice

    container OperationNode operationNode opposite deployedServices
}

/**
 * Represents the further specification of a service being deployed to an operation node
 */
class ServiceDeploymentSpecification {
    /**
     * Implicit Constraints:
     *     (C1) Each service property might receive a value once.
     *          Ensured by: DSL validator.
     *     (C2) Endpoints must be unique for protocol and data format combination.
     *          Ensured by: DSL validator.
     */

    refers Import ^import
    refers ImportedMicroservice service
    contains TechnologySpecificPropertyValueAssignment[] servicePropertyValues
    contains BasicEndpoint[] basicEndpoints opposite deploymentSpecification

    container OperationNode operationNode opposite deploymentSpecifications
}

/**
 * Concept to consolidate a protocol and data format from a given technology
 */
class ProtocolAndDataFormat {
    /**
     * Implicit Constraints:
     *     (C1) Protocol must be one from the technology assigned to the parent operation node.
     *          Ensured by: DSL scope provider.
     *     (C2) Data format must be one from the technology assigned to the parent operation node
     *          and correspond to the protocol.
     *          Ensured by: DSL scope provider.
     */
    refers Import technology
    refers Protocol protocol
    refers DataFormat[0..1] dataFormat

    container BasicEndpoint endpoint opposite protocols
}

/**
 * Default and service-specific basic endpoints
 */
class BasicEndpoint {
    /**
     * Implicit Constraints:
     *     (C1) Addresses must be unique.
     *          Ensured by: DSL validator.
     */

    String[1..*] addresses

    contains ProtocolAndDataFormat[1..*] protocols opposite endpoint

    container Container ^container opposite defaultBasicEndpoints
    container InfrastructureNode infrastructureNode opposite endpoints
    container ServiceDeploymentSpecification deploymentSpecification opposite basicEndpoints
}

/**
 * Metamodel concept for operation aspects being implicitly imported from a technology model
 */
class ImportedOperationAspect {
    /**
     * Implicit Constraints:
     *     (C1) An aspect may not be assigned twice to a concept instance.
     *          Ensured by: DSL validator.
     *     (C2) A single property value may only be assigned if the aspect has exactly one property.
     *          Ensured by: DSL validator.
     *     (C3) Property values must match the type of the aspect property as defined in the
     *          technology being assigned to the parent microservice mapping.
     *          Ensured by: DSL validator.
     *     (C4) Mandatory properties must have values assigned.
     *          Ensured by: DSL validator.
     */

    refers Import technology
    refers OperationAspect aspect
    contains PrimitiveValue singlePropertyValue
    contains TechnologySpecificPropertyValueAssignment[] values

    container OperationNode operationNode opposite aspects
}


/**
 * A operation node possibly imported from another operation model
 */
class PossiblyImportedOperationNode {
    refers Import[0..1] ^import
    refers OperationNode node

    /**
     * Get the qualified infrastructure technology name for infrastructure nodes or the deployment
     * technology name for container.
     */
    op String getTechnologyName(OperationNode node) {
        switch(node) {
            InfrastructureNode:
                node.infrastructureTechnology.infrastructureTechnology.buildQualifiedName(".", true,
                    false)
            Container:
                node.deploymentTechnology.deploymentTechnology.buildQualifiedName(".", true, false)
            default: null
        }
    }
}