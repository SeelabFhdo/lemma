/**
 * generated by Xtext 2.12.0
 */
package de.fhdo.lemma.operationdsl.formatting2;

import com.google.inject.Inject;
import de.fhdo.lemma.formatting2.ServiceDslFormatter;
import de.fhdo.lemma.operation.Container;
import de.fhdo.lemma.operation.OperationModel;
import de.fhdo.lemma.operationdsl.services.OperationDslGrammarAccess;
import de.fhdo.lemma.service.Import;
import de.fhdo.lemma.service.ServiceModel;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class OperationDslFormatter extends ServiceDslFormatter {
  @Inject
  @Extension
  private OperationDslGrammarAccess _operationDslGrammarAccess;

  protected void _format(final OperationModel operationModel, @Extension final IFormattableDocument document) {
    EList<Import> _imports = operationModel.getImports();
    for (final Import _import : _imports) {
      document.<Import>format(_import);
    }
    EList<Container> _containers = operationModel.getContainers();
    for (final Container container : _containers) {
      document.<Container>format(container);
    }
  }

  public void format(final Object operationModel, final IFormattableDocument document) {
    if (operationModel instanceof XtextResource) {
      _format((XtextResource)operationModel, document);
      return;
    } else if (operationModel instanceof OperationModel) {
      _format((OperationModel)operationModel, document);
      return;
    } else if (operationModel instanceof ServiceModel) {
      _format((ServiceModel)operationModel, document);
      return;
    } else if (operationModel instanceof EObject) {
      _format((EObject)operationModel, document);
      return;
    } else if (operationModel == null) {
      _format((Void)null, document);
      return;
    } else if (operationModel != null) {
      _format(operationModel, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(operationModel, document).toString());
    }
  }
}
