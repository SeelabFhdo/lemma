/**
 * @author <a href="mailto:florian.rademacher@fh-dortmund.de">Florian Rademacher</a>
 */
grammar de.fhdo.lemma.ServiceDsl with de.fhdo.lemma.technology.TechnologyDsl

import "de.fhdo.lemma.service"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "de.fhdo.lemma.data" as data
import "de.fhdo.lemma.technology" as technology

ServiceModel returns ServiceModel:
    imports+=Import*
    microservices+=Microservice+
;

Import returns Import:
    'import' importType=ImportType 'from' importURI=STRING 'as' name=ID
;

enum ImportType returns ImportType:
    DATATYPES='datatypes' | TECHNOLOGY='technology' | MICROSERVICES='microservices'
;

enum Visibility returns Visibility:
    INTERNAL='internal' | ARCHITECTURE='architecture' | PUBLIC='public'
;

Microservice returns Microservice:
    (technologyReferences+=TechnologyReference)*
    (protocols+=ProtocolSpecification (protocols+=ProtocolSpecification)?)?
    ('@' 'endpoints' '(' endpoints+=Endpoint+ ')')?
    aspects+=ImportedServiceAspect*
    visibility=Visibility?
    type=MicroserviceType
    'microservice' name=QualifiedNameWithAtLeastOneLevel ('version' version=ID)?
    // TODO: Inheritance of microservices
    //('extends' super=[Microservice|QualifiedNameWithAtLeastOneLevel])?
    '{'
        ('required' 'microservices' '{'
            requiredMicroservices+=PossiblyImportedMicroservice
            (',' requiredMicroservices+=PossiblyImportedMicroservice)*
        '}')?
        ('required' 'interfaces' '{'
            requiredInterfaces+=PossiblyImportedInterface
            (',' requiredInterfaces+=PossiblyImportedInterface)*
        '}')?
        ('required' 'operations' '{'
            requiredOperations+=PossiblyImportedOperation
            (',' requiredOperations+=PossiblyImportedOperation)*
        '}')?
        interfaces+=Interface+
    '}'
;

TechnologyReference returns TechnologyReference:
    '@' 'technology'
        '('
            technology=[Import]
            (',' 'typedef' '=' isTypeDefinitionTechnology=BOOLEAN)?
        ')'
;

PossiblyImportedMicroservice returns PossiblyImportedMicroservice:
    (^import=[Import] '::')? microservice=[Microservice|QualifiedName]
;

PossiblyImportedInterface returns PossiblyImportedInterface:
    (^import=[Import] '::')? interface=[Interface|QualifiedName]
;

PossiblyImportedOperation returns PossiblyImportedOperation:
    (^import=[Import] '::')? operation=[Operation|QualifiedName]
;

Interface returns Interface:
    (protocols+=ProtocolSpecification (protocols+=ProtocolSpecification)?)?
    ('@' 'endpoints' '(' endpoints+=Endpoint+ ')')?
    aspects+=ImportedServiceAspect*
    (notImplemented?='noimpl')? visibility=Visibility? 'interface' name=ID ('version' version=ID)?
    '{'
        referredOperations+=ReferredOperation*
        operations+=Operation*
    '}'
;

ApiOperationComment returns ApiOperationComment:
    '---'
        comment=Anything
        parameterComments+=ApiParameterComment*
    '---'
;

ApiParameterComment returns ApiParameterComment:
    ('@param' | required?='@required')
    parameter=[Parameter]
    comment=Anything
;

Operation returns Operation:
    (apiOperationComment=ApiOperationComment)?
    (protocols+=ProtocolSpecification (protocols+=ProtocolSpecification)?)?
    ('@' 'endpoints' '(' endpoints+=Endpoint+ ')')?
    aspects+=ImportedServiceAspect*
    (notImplemented?='noimpl')? visibility=Visibility? name=ID '('
        parameters+=Parameter? (',' parameters+=Parameter)*
    ')' ';'
;

ReferredOperation returns ReferredOperation:
    (protocols+=ProtocolSpecification (protocols+=ProtocolSpecification)?)?
    ('@' 'endpoints' '(' endpoints+=Endpoint+ ')')?
    aspects+=ImportedServiceAspect*
    'refers' operation=[Operation|QualifiedName] ';'
;

Parameter returns Parameter:
    aspects+=ImportedServiceAspect*
    communicationType=CommunicationType
    exchangePattern=ExchangePattern?
    (communicatesFault?='fault')?
    name=ID
    (optional?='?')?
    ':'
    (primitiveType=PrimitiveType | importedType=ImportedType)
    ('=' initializedByOperation=PossiblyImportedOperation)?
;

ImportedType returns ImportedType:
    ^import=[Import] '::' type=[data::Type|QualifiedName]
;

ProtocolSpecification returns ProtocolSpecification:
    '@' communicationType=CommunicationType '('
        protocol=ImportedProtocolAndDataFormat
    ')'
;

ImportedProtocolAndDataFormat returns ImportedProtocolAndDataFormat:
    ^import=[Import] '::' importedProtocol=[technology::Protocol|QualifiedName]
    ('/' dataFormat=[technology::DataFormat])?
;

Endpoint returns Endpoint:
    protocols+=ImportedProtocolAndDataFormat (',' protocols+=ImportedProtocolAndDataFormat)* ':'
    addresses+=STRING (',' addresses+=STRING)* ';'
;

ImportedServiceAspect returns ImportedServiceAspect:
    '@' ^import=[Import] '::' importedAspect=[technology::ServiceAspect|QualifiedName]
    ('('
        (singlePropertyValue=PrimitiveValue
            |
         (values+=PropertyValueAssignment (',' values+=PropertyValueAssignment)*)
        )
    ')')?
;

PropertyValueAssignment returns technology::TechnologySpecificPropertyValueAssignment:
    (property=[technology::TechnologySpecificProperty] '=' value=PrimitiveValue) |
    (property=[technology::TechnologySpecificProperty] '(' value=PrimitiveValue ')')
;

enum MicroserviceType returns MicroserviceType:
    FUNCTIONAL='functional' | UTILITY='utility' | INFRASTRUCTURE = 'infrastructure'
;

QualifiedNameWithAtLeastOneLevel:
    ID '.' QualifiedName
;

// Rule to consume any character
Anything:
    (
        // All keyword characters of the Service, Technology, and Data DSLs (the Service DSL
        // inherits from the latter ones). If we don't specify them here, they will be recognized as
        // regular grammar tokens in the Anything string.
        '{' | '}' | '<' | '>' | ',' | '(' | ')' | '::' | '.' | '-' | '--' | '/' | '?' | ':' | '@' |
        '=' | ';' |

        // All keywords of the Technology DSL (from which the Service DSL inherits). If we don't
        // specify them here, they will be recognized as regular grammar tokens in the Anything
        // string.
        'technology' | 'types' | 'compatibility' | 'matrix' | 'protocols' | 'service' | 'aspects' |
        'deployment' | 'technologies' | 'infrastructure' | 'operation' | 'import' | 'from' | 'as' |
        'data' | 'formats' | 'default' | 'with' | 'format' | 'in' | 'out' | 'inout' | 'sync' |
        'async' | 'primitive' | 'type' | 'based' | 'on' | 'list' | 'structure' | '->' | '<-' |
        '<->' | 'environments' | 'properties' | 'mandatory' | 'singleval' | 'microservices' |
        'interfaces' | 'operations' | 'parameters' | 'fields' | 'exchange_pattern' |
        'communication_type' | 'protocol' | 'data_format' | 'aspect' | 'for' | 'containers' |
        'selector'

        // All keywords of the Data DSL (from which the Service DSL inherits). If we don't specify
        // them here, they will be recognized as regular grammar tokens in the Anything string.
        'datatypes' |  'version' | 'context' | 'aggregate'  | 'applicationService' | 'domainEvent' |
        'domainService' | 'entity' | 'factory' | 'infrastructureService' | 'repository' |
        'specification' | 'valueObject' | 'extends' | 'identifier' | 'neverEmpty' | 'part' |
        'hide' | 'immutable' | 'enum' | 'closure' | 'sideEffectFree' | 'validator' | 'function' |
        'procedure' | 'boolean' | 'byte' | 'char' | 'date' | 'double' | 'float' | 'int' | 'long' |
        'short' | 'string' |

        // All keywords of the Service DSL. If we don't specify them here, they will be recognized
        // as regular grammar tokens in the Anything string.
        'internal' | 'architecture' | 'public' | 'endpoints' | 'microservice' | 'required' |
        'typedef' | 'noimpl' | 'interface' | 'param' | 'refers' | 'fault' | 'functional' |
        'utility' |

        // All other terminal rules of the Service and the Data DSL (from which the Service DSL
        // inherits). If we don't specify them here, they will be recognized as regular grammar
        // tokens in the Anything string.
        BOOLEAN | BIG_DECIMAL | ID | STRING | ANY_OTHER
    )+
;

// We override the STRING terminal rule so that only double-quotes instead of single-quotes can be
// used to express strings. That is, because we need to be able to use a single single-quote in the
// Anything rule and hence in API operation comments. Otherwise, we could not state comments such as
// "Change a customer_'_s address".
@Override
terminal STRING:
    '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"'
;