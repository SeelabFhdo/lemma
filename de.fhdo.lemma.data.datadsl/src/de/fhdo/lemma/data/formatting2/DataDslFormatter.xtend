/*
 * generated by Xtext 2.12.0
 */
package de.fhdo.lemma.data.formatting2

import com.google.inject.Inject
import de.fhdo.lemma.data.ComplexType
import de.fhdo.lemma.data.Context
import de.fhdo.lemma.data.DataModel
import de.fhdo.lemma.data.Version
import de.fhdo.lemma.data.services.DataDslGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class DataDslFormatter extends AbstractFormatter2 {

    @Inject extension DataDslGrammarAccess

    def dispatch void format(DataModel dataModel, extension IFormattableDocument document) {
        // TODO: format HiddenRegions around keywords, attributes, cross references, etc.
        for (Version version : dataModel.getVersions()) {
            version.format;
        }
        for (Context context : dataModel.getContexts()) {
            context.format;
        }
        for (ComplexType complexType : dataModel.getComplexTypes()) {
            complexType.format;
        }
    }

    def dispatch void format(Version version, extension IFormattableDocument document) {
        // TODO: format HiddenRegions around keywords, attributes, cross references, etc.
        for (ComplexType complexType : version.getComplexTypes()) {
            complexType.format;
        }
        for (Context context : version.getContexts()) {
            context.format;
        }
    }

    // TODO: implement for Context, DataStructure, CollectionType, DataField
}
