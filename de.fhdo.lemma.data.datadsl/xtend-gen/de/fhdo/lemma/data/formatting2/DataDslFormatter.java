/**
 * generated by Xtext 2.12.0
 */
package de.fhdo.lemma.data.formatting2;

import com.google.inject.Inject;
import de.fhdo.lemma.data.ComplexType;
import de.fhdo.lemma.data.Context;
import de.fhdo.lemma.data.DataModel;
import de.fhdo.lemma.data.Version;
import de.fhdo.lemma.data.services.DataDslGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class DataDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private DataDslGrammarAccess _dataDslGrammarAccess;

  protected void _format(final DataModel dataModel, @Extension final IFormattableDocument document) {
    EList<Version> _versions = dataModel.getVersions();
    for (final Version version : _versions) {
      document.<Version>format(version);
    }
    EList<Context> _contexts = dataModel.getContexts();
    for (final Context context : _contexts) {
      document.<Context>format(context);
    }
    EList<ComplexType> _complexTypes = dataModel.getComplexTypes();
    for (final ComplexType complexType : _complexTypes) {
      document.<ComplexType>format(complexType);
    }
  }

  protected void _format(final Version version, @Extension final IFormattableDocument document) {
    EList<ComplexType> _complexTypes = version.getComplexTypes();
    for (final ComplexType complexType : _complexTypes) {
      document.<ComplexType>format(complexType);
    }
    EList<Context> _contexts = version.getContexts();
    for (final Context context : _contexts) {
      document.<Context>format(context);
    }
  }

  public void format(final Object dataModel, final IFormattableDocument document) {
    if (dataModel instanceof XtextResource) {
      _format((XtextResource)dataModel, document);
      return;
    } else if (dataModel instanceof DataModel) {
      _format((DataModel)dataModel, document);
      return;
    } else if (dataModel instanceof Version) {
      _format((Version)dataModel, document);
      return;
    } else if (dataModel instanceof EObject) {
      _format((EObject)dataModel, document);
      return;
    } else if (dataModel == null) {
      _format((Void)null, document);
      return;
    } else if (dataModel != null) {
      _format(dataModel, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(dataModel, document).toString());
    }
  }
}
