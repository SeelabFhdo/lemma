@Ecore(nsURI="http://www.fhdo.de/lemma/data/intermediate", nsPrefix="intermediate")
package de.fhdo.lemma.data.intermediate

import de.fhdo.lemma.service.ImportType
import java.util.Map

/**
 * Metamodel of intermediate data models.
 *
 * @author <a href="mailto:florian.rademacher@fh-dortmund.de">Florian Rademacher</a>
 */

class IntermediateDataModel {
    // "file" URI to the source model from which this intermediate model was derived
    String sourceModelUri

    contains IntermediateImport[] imports opposite dataModel
    contains IntermediateVersion[] versions opposite dataModel
    contains IntermediateContext[] contexts opposite dataModel
    contains IntermediateComplexType[] complexTypes opposite dataModel
}

/**
 * Import
 */
class IntermediateImport {
    String name
    String importUri
    // Note that this would normally be a field of type de.fhdo.lemma.service.ImportType. However,
    // the XMI serializer seems to refuse to write the first constant of an enum (DATATYPES in this
    // case) to the target file. This seems to be a bug. However, we don't want to extend the source
    // metamodel with a dummy constant to not bloat it with even more "transformation-only"
    // information. That is, we use the name of the ImportType instead here, i.e., "DATATYPES"
    // instead of ImportType.DATATYPES.
    String importTypeName

    container IntermediateDataModel dataModel opposite imports

    /**
     * Helper to return the String representation of the DATATYPES ImportType enum constant in a
     * type-safe way. This is necessary to cope with the bug in the XMI serializer (see above).
     */
    derived String importTypeNameForDatatypes get {
        ImportType.DATATYPES.literal
    }
}

/**
 * Intermediate version
 */
class IntermediateVersion {
    String name

    contains IntermediateComplexType[] complexTypes opposite version
    contains IntermediateContext[] contexts opposite version

    container IntermediateDataModel dataModel opposite versions
}

/**
 * Intermediate context
 */
class IntermediateContext {
    String name
    String qualifiedName

    contains IntermediateComplexType[1..*] complexTypes opposite context

    container IntermediateDataModel dataModel opposite contexts
    container IntermediateVersion version opposite contexts
}

/**
 * Data type kind
 */
enum IntermediateTypeKind {
    // Dummy constant due to XMI serializer bug (see comments in Import concept)
    DUMMY_FOR_XMI_SERIALIZER_BUG,
    ENUMERATION,
    LIST,
    PRIMITIVE,
    STRUCTURE
}

/**
 * Origin of a data type
 */
enum IntermediateTypeOrigin {
    // Dummy constant due to XMI serializer bug (see comments in Import concept)
    DUMMY_FOR_XMI_SERIALIZER_BUG,
    DATA_MODEL,
    BUILTIN,
    TECHNOLOGY
}

/**
 * Intermediate concept for any possible type in the context of the languages, i.e., it may be of
 * one of the kinds primitive, list, or data structure, and one of the origins built-in, data model,
 * technology. Note that currently only the following combinations are possible:
 *      kind                origins
 *      primitive           built-in, technology
 *      list                data model, technology
 *      data structure      data model, technology
 * However, code generators should not depend on these combinations.
 */
abstract class IntermediateType {
    String name
    IntermediateTypeOrigin origin
    IntermediateTypeKind kind

    container IntermediateDataOperationReturnType returnType opposite ^type
    container IntermediateDataOperationParameter parameter opposite ^type
    container IntermediateDataField dataField opposite ^type
}

/**
 * Primitive type
 */
class IntermediatePrimitiveType extends IntermediateType {
    Integer size

    container IntermediateDataField initializedDataField opposite initializationValueCompatibleTypes
    container IntermediateEnumerationField initializedEnumerationField
        opposite initializationValueCompatibleTypes
}

/**
 * Complex type
 */
class IntermediateComplexType extends IntermediateType {
    String qualifiedName
    contains IntermediateImportedAspect[] aspects opposite complexType

    container IntermediateDataModel dataModel opposite complexTypes
    container IntermediateVersion version opposite complexTypes
    container IntermediateContext context opposite complexTypes
}

/**
 * Imported complex type
 */
class IntermediateImportedComplexType extends IntermediateComplexType {
    refers IntermediateImport ^import
}

/**
 * Imported technology-specific type
 */
class IntermediateImportedTechnologySpecificType extends IntermediateType {
    String qualifiedName
    refers IntermediateImport ^import
}

/**
 * Data structure
 */
class IntermediateDataStructure extends IntermediateComplexType {
    String[] featureNames
    refers IntermediateDataStructure ^super
    contains IntermediateDataOperation[] operations opposite dataStructure
    contains IntermediateDataField[] dataFields opposite dataStructure
}

/**
 * Data operation
 */
class IntermediateDataOperation {
    String name
    String qualifiedName
    boolean hidden
    boolean inherited
    String[] featureNames

    contains IntermediateDataOperationReturnType[0..1] returnType opposite operation
    contains IntermediateDataOperationParameter[] parameters opposite operation
    contains IntermediateImportedAspect[] aspects opposite operation

    container IntermediateDataStructure dataStructure opposite operations
}

/**
 * Data operation return type
 */
class IntermediateDataOperationReturnType {
    contains IntermediateType ^type opposite returnType
    contains IntermediateType originalType
    contains IntermediateImportedAspect[] aspects opposite returnType

    container IntermediateDataOperation operation opposite returnType
}

/**
 * Data operation parameter
 */
class IntermediateDataOperationParameter {
    String name
    String qualifiedName

    contains IntermediateType ^type opposite parameter
    contains IntermediateType originalType
    contains IntermediateImportedAspect[] aspects opposite parameter

    container IntermediateDataOperation operation opposite parameters
}

/**
 * List type
 */
class IntermediateListType extends IntermediateComplexType {
    boolean primitiveList
    boolean structuredList

    contains IntermediatePrimitiveType[0..1] primitiveType
    contains IntermediateDataField[] dataFields opposite listType
}

/**
 * Data field
 */
class IntermediateDataField {
    String name
    String qualifiedName
    boolean hidden
    boolean immutable
    boolean inherited
    String[] featureNames
    // The initialization value is encoded in a single String. However, the validators of the
    // languages ensure that the value corresponds to the type of the property.
    String initializationValue

    contains IntermediatePrimitiveType[] initializationValueCompatibleTypes
        opposite initializedDataField
    contains IntermediateType ^type opposite dataField
    contains IntermediateType originalType
    contains IntermediateImportedAspect[] aspects opposite dataField

    container IntermediateDataStructure dataStructure opposite dataFields
    container IntermediateListType listType opposite dataFields

    /**
     * Get the effective containing complex type of this data field
     */
    op IntermediateComplexType getEffectiveComplexType() {
        return if (dataStructure !== null)
                dataStructure
            else if (listType !== null)
                listType
            else
                null
    }
}

/**
 * Enumeration
 */
class IntermediateEnumeration extends IntermediateComplexType {
    String[] featureNames
    contains IntermediateEnumerationField[1..*] fields opposite enumeration
}

/**
 * Enumeration field
 */
class IntermediateEnumerationField {
    String name
    String qualifiedName
    // The initialization value is encoded in a single String. However, the validators of the
    // languages ensure that the value corresponds to the type of the property.
    String initializationValue

    contains IntermediatePrimitiveType[] initializationValueCompatibleTypes
        opposite initializedEnumerationField
    container IntermediateEnumeration enumeration opposite fields
}

/**
 * Aspect
 */
class IntermediateImportedAspect {
    String name
    String qualifiedName
    String[] featureNames

    refers IntermediateImport ^import
    contains IntermediateAspectProperty[] properties opposite aspect
    contains IntermediateAspectPropertyValue[] propertyValues opposite aspect

    container IntermediateComplexType complexType opposite aspects
    container IntermediateDataOperation operation opposite aspects
    container IntermediateDataOperationReturnType returnType opposite aspects
    container IntermediateDataOperationParameter parameter opposite aspects
    container IntermediateDataField dataField opposite aspects

    op EffectivePropertyValuesMap getEffectivePropertyValues() {
        return properties.toMap(
            [it],
            [
                val actualValue = propertyValues.findFirst[value | value.property.name == it.name]
                if (actualValue !== null)
                    actualValue.value
                else
                    it.defaultValue
            ]
        )
    }
}

/**
 * Aspect property
 */
class IntermediateAspectProperty {
    String name
    String ^type
    // The default value is encoded in a single String. However, the validators of the languages
    // ensure that the default value corresponds to the type of the property.
    String defaultValue
    String[] featureNames

    container IntermediateImportedAspect aspect opposite properties
}

/**
 * Property value
 */
class IntermediateAspectPropertyValue {
    // The value is encoded in a single String. However, the validators of the languages ensure that
    // the value corresponds to the type of the property.
    String value

    refers IntermediateAspectProperty property

    container IntermediateImportedAspect aspect opposite propertyValues
}

type EffectivePropertyValuesMap wraps Map<IntermediateAspectProperty, String>