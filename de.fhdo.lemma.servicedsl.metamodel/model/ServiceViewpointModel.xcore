package de.fhdo.lemma.service

import de.fhdo.lemma.data.PrimitiveType
import de.fhdo.lemma.data.PrimitiveValue
import de.fhdo.lemma.data.Type
import de.fhdo.lemma.technology.Technology
import de.fhdo.lemma.technology.CommunicationType
import de.fhdo.lemma.technology.ExchangePattern
import de.fhdo.lemma.technology.Protocol
import de.fhdo.lemma.technology.DataFormat
import de.fhdo.lemma.technology.ServiceAspect
import de.fhdo.lemma.technology.TechnologySpecificPrimitiveType
import de.fhdo.lemma.technology.TechnologySpecificPropertyValueAssignment
import de.fhdo.lemma.data.ComplexType
import de.fhdo.lemma.data.DataField
import de.fhdo.lemma.data.EnumerationField
import de.fhdo.lemma.data.DataOperation
import de.fhdo.lemma.data.DataOperationParameter
import java.util.List
import java.util.Map
import org.eclipse.xtext.xbase.lib.Pair
import de.fhdo.lemma.utils.LemmaUtils
import de.fhdo.lemma.technology.TechnologySpecificDataStructure
import de.fhdo.lemma.technology.TechnologySpecificListType

/**
 * This metamodel represents the Service Modeling Viewpoint, which is used for defining services.
 *
 * @author <a href="mailto:florian.rademacher@fh-dortmund.de">Florian Rademacher</a>
 */
class ServiceModel {
    // TRANSFORMATION ONLY: The file path of the model in the form of a URI with a "file" scheme
    String t_modelUri

    contains Import[] imports opposite serviceModel
    contains MappedComplexType[] mappedComplexTypes opposite serviceModel
    contains Microservice[1..*] microservices opposite serviceModel

    /**
     * Get all operations of all defined microservices
     */
    op Operation[] getContainedOperations() {
        return microservices.map[it.containedOperations].flatten.toList.asEList
    }

    /**
     * Get all referred operations of all defined microservices
     */
    op ReferredOperation[] getContainedReferredOperations() {
        return microservices.map[it.containedReferredOperations].flatten.toList.asEList
    }

    /**
     * Get all interfaces of all defined microservices
     */
    op Interface[] getContainedInterfaces() {
        return microservices.map[it.interfaces].flatten.toList.asEList
    }
}

/**
 * Determines the allowed types of imports
 */
enum ImportType {
    DATATYPES
    TECHNOLOGY
    MICROSERVICES
}

/**
 * Concept for importing data types, technologies, and microservices into the metamodel
 */
class Import {
    /**
     * Implicit Constraints:
     *     (C1) The import URI must point to a valid file.
     *          Ensured by: DSL validator.
     *     (C2) Imports must not be cyclic, i.e., the imported model must not directly or indirectly
     *          import this model.
     *          Ensured by: DSL validator.
     *     (C3) Imported file must define a model that corresponds to the import type.
     *          Ensured by: DSL validator.
     *     (C4) Import alias must be unique.
     *          Ensured by: DSL validator.
     */

    // TRANSFORMATION ONLY: Alias of a "somehow" related import. This is, for instance, used by the
    //                      mapping model transformation to determine from which service model an
    //                      imported data model originates.
    String t_relatedImportAlias

    String name
    String importURI
    ImportType importType

    container ServiceModel serviceModel opposite imports
}

/**
 * Concept to express technology-specific information, which was assigned to a complex type
 * leveraging the Mapping DSL
 */
class MappedComplexType {
    // TRANSFORMATION ONLY: The path to the source Data Model in which the complex type is defined.
    //                      This property is only filled in transformations of Mapping Models to
    //                      Service Models and later used in executing refinements of Intermediate
    //                      Data Models.
    String t_sourceModelUri
    // TRANSFORMATION ONLY: Import of technology that contains the default types (there can only be
    //                      one)
    refers Import t_typeDefinitionTechnologyImport
    // TRANSFORMATION ONLY: Technology that contains the default types (there can only be one)
    refers Technology t_typeDefinitionTechnology

    contains TechnologyReference[] technologyReferences opposite mappedComplexType
    contains ImportedType ^type
    contains MappedField[] mappedFields opposite mappedComplexType
    contains MappedDataOperation[] mappedOperations opposite mappedComplexType
    contains ImportedServiceAspect[] aspects opposite mappedComplexType

    container ServiceModel serviceModel opposite mappedComplexTypes

    /**
     * Get parts of the mapped complex type for creating a qualified name
     */
    op String[] getQualifiedNameParts(boolean withImportName) {
        val importName = ^type?.import?.name
        if (importName === null)
            return newArrayList.asEList

        val typeNameParts = (^type?.^type as ComplexType).qualifiedNameParts
        if (typeNameParts === null)
            return newArrayList.asEList

        val nameParts = if (withImportName) newArrayList(importName) else newArrayList()
        nameParts.addAll(typeNameParts)
        nameParts.asEList
    }

    /**
     * Build qualified name from qualified name parts
     */
    op String buildQualifiedName(String separator, boolean withImportName) {
        if (separator === null)
            return null

        var String qualifiedName = ""
        for (part : getQualifiedNameParts(withImportName))
            qualifiedName += separator + part
        // Remove leading separator
        if (!qualifiedName.empty)
            qualifiedName = qualifiedName.substring(separator.length)
        return qualifiedName
    }

    /**
     * Get all technology references that point to technology models defining types
     */
    op TechnologyReference[] getAllTypeDefinitionTechnologyReferences() {
        return technologyReferences.filter[
            val resource = technology.eResource
            val importURI = technology.importURI
            val technologyModel = LemmaUtils.getImportedModelRoot(resource, importURI, Technology)
            !technologyModel.primitiveTypes.empty ||
            !technologyModel.listTypes.empty ||
            !technologyModel.dataStructures.empty
        ].toEList
    }

    /**
     * Get import of type definition technology. If no explicit technology reference was marked as
     * pointing to the default type definition technology, this corresponds to the first technology
     * import in the list of type definition technology imports. This operation should only be
     * executed if the model had been validated to refer to one type definition technology at most.
     */
    op Import getTypeDefinitionTechnologyImport() {
        val explicitTypeDefinitionTechnologyImport = technologyReferences
            .findFirst[isIsTypeDefinitionTechnology]
            ?.technology
        if (explicitTypeDefinitionTechnologyImport !== null)
            return explicitTypeDefinitionTechnologyImport

        // No technology explicitly marked as being the one with the default type definitions. We
        // then take the first one with type definitions, if any.
        val allTypeDefinitionTechnologyReferences = getAllTypeDefinitionTechnologyReferences()
        return if (!allTypeDefinitionTechnologyReferences.empty)
                allTypeDefinitionTechnologyReferences.get(0).technology
            else
                null
    }

    /**
     * Get type definition technology
     */
    op Technology getTypeDefinitionTechnology() {
        val typeDefinitionTechnologyImport = getTypeDefinitionTechnologyImport()
        return if (typeDefinitionTechnologyImport !== null)
                LemmaUtils.getImportedModelRoot(
                    typeDefinitionTechnologyImport.eResource,
                    typeDefinitionTechnologyImport.importURI,
                    Technology
                )
            else
                null
    }
}

/**
 * Concept to express technology-specific information, which was assigned to a data operation
 * leveraging the Mapping DSL
 */
class MappedDataOperation {
    refers DataOperation dataOperation
    contains ImportedServiceAspect[] aspects opposite mappedDataOperation
    contains MappedDataOperationReturnType[0..1] mappedReturnType opposite mappedOperation
    contains MappedDataOperationParameter[] mappedParameters opposite mappedOperation

    container MappedComplexType mappedComplexType opposite mappedOperations
}

/**
 * Concept to express technology-specific information, which was assigned to the return type of a
 * data operation leveraging the Mapping DSL
 */
class MappedDataOperationReturnType {
    contains ImportedType[0..1] mappedType
    contains ImportedServiceAspect[] aspects opposite mappedDataOperationReturnType

    container MappedDataOperation mappedOperation opposite mappedReturnType
}

/**
 * Concept to express technology-specific information, which was assigned to a data operation
 * parameter leveraging the Mapping DSL
 */
class MappedDataOperationParameter {
    refers DataOperationParameter parameter
    contains ImportedType[0..1] mappedType
    contains ImportedServiceAspect[] aspects opposite mappedDataOperationParameter

    container MappedDataOperation mappedOperation opposite mappedParameters
}

/**
 * Concept to express technology-specific information, which was assigned to a data or enumeration
 * field leveraging the Mapping DSL
 */
class MappedField {
    refers DataField dataField
    refers EnumerationField enumerationField
    contains ImportedType[0..1] mappedType
    contains ImportedServiceAspect[] aspects opposite mappedField

    container Parameter parameter opposite mappedFields
    container MappedComplexType mappedComplexType opposite mappedFields

    /**
     * Get name of mapped field
     */
    derived String name get {
        return if (dataField !== null)
                dataField.name
            else if (enumerationField !== null)
                enumerationField.name
    }

    /**
     * Get parts of the mapped field for creating a fully-qualified name
     */
    op String[] getQualifiedNameParts(boolean withImportName) {
        if (name === null || name.empty)
            return newArrayList.asEList

        val nameParts = if (mappedComplexType !== null)
                mappedComplexType.getQualifiedNameParts(withImportName)
            else
                parameter.qualifiedNameParts

        nameParts.addAll(name)
        nameParts.asEList
    }

    /**
     * Build qualified name from qualified name parts
     */
    op String buildQualifiedName(String separator, boolean withImportName) {
        if (separator === null)
            return null

        var String qualifiedName = ""
        for (part : getQualifiedNameParts(withImportName))
            qualifiedName += separator + part
        // Remove leading separator
        if (!qualifiedName.empty)
            qualifiedName = qualifiedName.substring(separator.length)
        return qualifiedName
    }

    /**
     * Get the effective type of the mapped data field. The effective type corresponds to the mapped
     * type, if the data field or enumeration field has one. Otherwise, it is the effective type of
     * the data field itself or the enumeration that comprises the enumeration field.
     */
    op Type getEffectiveType() {
        return if (mappedType !== null)
            mappedType.^type
        else if (dataField !== null)
            dataField.effectiveType
        else if (enumerationField !== null)
            enumerationField.enumeration
        else
            return null
    }
}

/**
 * Type of a microservice
 */
enum MicroserviceType {
    FUNCTIONAL
    UTILITY
    INFRASTRUCTURE
}

/**
 * Visibility of microservices, interfaces, and operations
 */
enum Visibility {
    // Internal enum value used to state that an element does not have an explicit visibility
    // assigned, yet. This is needed, because the DSL won't allow enum-typed rule features to be
    // null.
    NONE,
    INTERNAL,
    // This enum value is a helper to explicitly allow distinguishing between interfaces/operations
    // directly marked as being internal, and those that are part of an internal service but do not
    // have a visibility assigned. They may still be used by services of the same service model.
    IN_MODEL,
    ARCHITECTURE,
    PUBLIC
}

/**
 * Concept to describe a microservices, its interfaces, and operations
 */
class Microservice {
    /**
     * Implicit Constraints:
     *     (C1) Name of a microservices must be qualified with at least one level, e.g.,
     *          "org.MyService".
     *          Ensured by: DSL grammar.
     *     (C2) No cyclic inheritance, i.e., within an inheritance hierarchy, a microservice must
     *          not occur twice.
     *          Ensured by: DSL validator.
     *     (C3) There might be at most one protocol per type for a microservice.
     *          Ensured by: DSL validator.
     *     (C4) A microservice may not require itself and only non-internal microservices from
     *          imported models.
     *          Ensured by: DSL scope provider.
     *     (C5) If a technology is assigned to the service, it must exhibit specifications for types
     *          and protocols. The rationale of this constraint is, that a technology might be
     *          assigned, but technology-specific types or protocols must not be explicitly assigned
     *          for convenience reasons. If they are missing, the defaults from the assigned
     *          technology are taken instead.
     *          Ensured by: DSL validator.
     *     (C6) Combination of endpoints' protocols and data formats must be unique.
     *          Ensured by: DSL validator.
     *     (C7) A technology might be assigned exactly once to a microservice.
     *          Ensured by: DSL validator.
     *     (C8) If more than one technology comprises technology-specific types, it must be declared
     *          as the default type definition technology.
     *          Ensured by: DSL validator.
     *     (C9) Assigned technologies may not only define deployment-specific concepts.
     *          Ensured by: DSL validator.
     *     (C10) If the service does not specify explicit protocols for a communication type, only
     *           one technology may comprise a default protocol specification for that type.
     *           Ensured by: DSL validator.
     *     (C11) If technology models were assigned to the service it must exhibit a protocol for
     *           each of its operation parameters' communication types.
     *           Ensured by: DSL validator.
     */

    String name
    String version
    MicroserviceType ^type
    Visibility visibility = "NONE"
    // TRANSFORMATION ONLY: Default protocols per communication type
    DefaultProtocols t_defaultProtocols
    // TRANSFORMATION ONLY: The path to the source model from which this microservice originated.
    //                      For transformations of Service Models to Intermediate Service Models,
    //                      this corresponds to the t_modelUri field of the root ServiceModel
    //                      concept. However, it can differ per microservice if the source was a
    //                      Mapping Model. That is, because Mapping Models may consist of
    //                      microservices being imported from different Service Models.
    String t_sourceModelUri

    // TODO: Inheritance of microservices
    //refers Microservice[0..1] ^super
    contains TechnologyReference[] technologyReferences opposite microservice
    // TRANSFORMATION ONLY: Import of technology that contains the default types (there can only be
    //                      one)
    refers Import t_typeDefinitionTechnologyImport
    // TRANSFORMATION ONLY: Technology that contains the default types (there can only be one)
    refers Technology t_typeDefinitionTechnology
    contains Endpoint[] endpoints opposite microservice
    contains PossiblyImportedMicroservice[] requiredMicroservices opposite requiringMicroservice
    contains PossiblyImportedInterface[] requiredInterfaces opposite requiringMicroservice
    contains PossiblyImportedOperation[] requiredOperations opposite requiringMicroservice
    contains ProtocolSpecification[0..2] protocols
    contains Interface[1..*] interfaces opposite microservice
    contains ImportedServiceAspect[] aspects opposite microservice

    container ServiceModel serviceModel opposite microservices

    /**
     * TRANSFORMATION ONLY: Get effective protocols of the microservice as combinations of Protocol
     * and DataFormat. The effective protocols are primarily determined by the microservice's
     * protocol specifications. If a protocol specification for a communication type is missing, the
     * default protocol and data format for the communication type are taken from the service's
     * default protocol technology.
     */
    op TupleList t_effectiveProtocolSpecifications() {
        val effectiveProtocolSpecifications = if (!protocols.empty)
                protocols.get(0).effectiveProtocolSpecifications(protocols)
            else
                <Map<String, Object>> newArrayList

        // Complement effective protocols with default protocols if necessary
        val protocolSpecificationsCommunicationTypes = protocols
            .map[protocol.importedProtocol.communicationType].toSet
        t_defaultProtocols?.forEach[communicationType, importAndProtocol |
            if (!protocolSpecificationsCommunicationTypes.contains(communicationType)) {
                val entry = <String, Object> newHashMap
                val protocol = importAndProtocol.value
                entry.put("protocol", protocol)
                entry.put("dataFormat", protocol.defaultFormat)
                entry.put("import", importAndProtocol.key)
                effectiveProtocolSpecifications.add(entry)
            }
        ]

        return effectiveProtocolSpecifications
    }

    /**
     * Get all technology references that point to technology models defining types
     */
    op TechnologyReference[] getAllTypeDefinitionTechnologyReferences() {
        return technologyReferences.filter[
            val resource = technology.eResource
            val importURI = technology.importURI
            val technologyModel = LemmaUtils.getImportedModelRoot(resource, importURI, Technology)
            !technologyModel.primitiveTypes.empty ||
            !technologyModel.listTypes.empty ||
            !technologyModel.dataStructures.empty
        ].toEList
    }

    /**
     * Get import of type definition technology. If no explicit technology reference was marked as
     * pointing to the default type definition technology, this corresponds to the first technology
     * import in the list of type definition technology imports. This operation should only be
     * executed if the model had been validated to refer to one type definition technology at most.
     */
    op Import getTypeDefinitionTechnologyImport() {
        val explicitTypeDefinitionTechnologyImport = technologyReferences
            .findFirst[isIsTypeDefinitionTechnology]
            ?.technology
        if (explicitTypeDefinitionTechnologyImport !== null)
            return explicitTypeDefinitionTechnologyImport

        // No technology explicitly marked as being the one with the default type definitions. We
        // then take the first one with type definitions, if any.
        val allTypeDefinitionTechnologyReferences = getAllTypeDefinitionTechnologyReferences()
        return if (!allTypeDefinitionTechnologyReferences.empty)
                allTypeDefinitionTechnologyReferences.get(0).technology
            else
                null
    }

    /**
     * Get type definition technology
     */
    op Technology getTypeDefinitionTechnology() {
        val typeDefinitionTechnologyImport = getTypeDefinitionTechnologyImport()
        return if (typeDefinitionTechnologyImport !== null)
                LemmaUtils.getImportedModelRoot(
                    typeDefinitionTechnologyImport.eResource,
                    typeDefinitionTechnologyImport.importURI,
                    Technology
                )
            else
                null
    }

    /**
     * Get parts of the microservice for creating a qualified name
     */
    op String[] getQualifiedNameParts() {
        if (name === null || name.empty)
            return newArrayList.asEList

        val nameParts = newArrayList
        if (version !== null)
            nameParts.add(version)

        nameParts.addAll(name.split("\\."))
        nameParts.asEList
    }

    /**
     * Build qualified name from qualified name parts
     */
    op String buildQualifiedName(String separator) {
        if (separator === null)
            return null

        var String qualifiedName = ""
        for (part : qualifiedNameParts)
            qualifiedName += separator + part
        // Remove leading separator
        if (!qualifiedName.empty)
            qualifiedName = qualifiedName.substring(separator.length)
        return qualifiedName
    }

    /**
     * Get all operations of all interfaces of the microservice
     */
    op Operation[] getContainedOperations() {
        if (interfaces === null)
            return newArrayList.asEList

        return interfaces
            .filter[it.operations !== null]
            .map[it.operations]
            .flatten
            .toEList
    }

    /**
     * Get all referred operations of all interfaces of the microservice
     */
    op ReferredOperation[] getContainedReferredOperations() {
        if (interfaces === null)
            return newArrayList.asEList

        return interfaces
            .filter[it.referredOperations !== null]
            .map[it.referredOperations]
            .flatten
            .toEList
    }

    /**
     * Get all import descriptions from imported, required concepts
     */
    op Import[] getRequiredImports() {
        val imports = <Import> newHashSet

        if (requiredMicroservices !== null && !requiredMicroservices.empty)
            imports.addAll(requiredMicroservices.filter[it.import !== null].map[it.import])

        if (requiredInterfaces !== null && !requiredInterfaces.empty)
            imports.addAll(requiredInterfaces.filter[it.import !== null].map[it.import])

        if (requiredOperations !== null && !requiredOperations.empty)
            imports.addAll(requiredOperations.filter[it.import !== null].map[it.import])

        return imports.asEList
    }

    /**
     * Get all operations that are directly or indirectly (i.e., from required interfaces and
     * microservices) required by this microservice from a given import
     */
    op Operation[] getAllRequiredOperations(Import fromImport) {
        val operations = <Operation> newHashSet

        if (requiredOperations !== null && !requiredOperations.empty)
            operations.addAll(requiredOperations
                .filter[
                    it.import == fromImport &&
                    it.operation !== null
                ]
                .map[it.operation]
            )

        if (requiredInterfaces !== null && !requiredInterfaces.empty)
            operations.addAll(requiredInterfaces
                .filter[
                    it.import == fromImport &&
                    it.interface !== null &&
                    it.interface.operations !== null
                ]
                .map[it.interface.operations]
                .flatten
            )

        if (requiredMicroservices !== null && !requiredMicroservices.empty)
            operations.addAll(requiredMicroservices
                .filter[
                    it.import == fromImport &&
                    it.microservice !== null
                ]
                .map[it.microservice.containedOperations]
                .flatten
            )

        return operations.asEList
    }

    /**
     * Get all microservices that are directly or indirectly (i.e., from required interfaces and
     * operations) required by this microservice
     */
    op MicroserviceImportMap getAllRequiredMicroservices() {
        val microservices = <Microservice, Import> newHashMap

        if (requiredMicroservices !== null)
            requiredMicroservices.forEach[microservices.put(microservice, import)]

        if (requiredInterfaces !== null)
            requiredInterfaces.forEach[microservices.put(interface.microservice, import)]

        if (requiredOperations !== null)
            requiredOperations.forEach[microservices.put(operation.interface.microservice, import)]

        return microservices
    }

    /**
     * Get all microservices whose operations' initializing parameters belong to operations of this
     * microservice
     */
    op Microservice[] getAllInitializingMicroservices() {
        val microservices = <Microservice> newHashSet

        containedOperations.map[parameters].flatten.forEach[
            if (initializedByOperation !== null)
                microservices.add(operation.interface.microservice)
        ]

        return microservices.asEList
    }

    /**
     * Check if microservice can require another microservice
     */
    op boolean canRequire(Microservice microservice, boolean isImportedService) {
        if (microservice === null)
            return false

        // A microservice cannot require itself. It can furthermore only require internal
        // microservices from the same model, but not from other, imported models. That is, internal
        // microservices act like private elements of a Java class without getter and setter access.
        return microservice !== this && (!isImportedService || !microservice.effectivelyInternal)
    }

    /**
     * Check if microservice can require an interface
     */
    op boolean canRequire(Interface iface, boolean isImportedInterface) {
        if (iface === null || iface.microservice === null)
            return false

        // A microservice can require an interface if its implemented and effectively not internal.
        // Furthermore, it must not be one of its own interfaces.
        var canRequire = !iface.notImplemented && !iface.effectivelyInternal
        if (interfaces !== null && !interfaces.empty)
            canRequire = canRequire && !interfaces.contains(iface)

        return canRequire
    }

    /**
     * Check if microservice can require an operation
     */
    op boolean canRequire(Operation operation, boolean isImportedOperation) {
        if (operation === null || operation.interface === null ||
            operation.interface.microservice === null)
            return false

        // A microservice can require an operation if its implemented and effectively not internal.
        // Furthermore, it must not be one of its own interfaces.
        var canRequire = !operation.effectivelyNotImplemented && !operation.effectivelyInternal
        if (containedOperations !== null && !containedOperations.empty)
            canRequire = canRequire && !containedOperations.contains(operation)

        return canRequire
    }

    /**
     * Check if microservice can extend another microservice as its super microservice
     */
    // TODO: Inheritance of microservices
    /*op boolean canExtend(Microservice microservice) {
        if (microservice === null)
            return false

        // A microservice cannot extend itself and only microservices of the same type
        return this !== microservice && ^type == microservice.^type
    }*/

    /**
     * Convenience method to check if a microservice is effectively implemented
     */
    derived boolean effectivelyImplemented get {
        return interfaces.exists[effectivelyImplemented]
    }

    /**
     * Get effective visibility
     */
    derived Visibility effectiveVisibility get {
        // The effective visibility of a service is architecture, in case no visibility has been
        // specified explicitly
        if (visibility === Visibility.NONE)
            return Visibility.ARCHITECTURE

        return visibility
    }

    /**
     * Convenience method to check if a microservice is effectively marked as being internal
     */
    derived boolean effectivelyInternal get {
        return effectiveVisibility === Visibility.INTERNAL
    }
}

/**
 * Represents a reference to a technology
 */
class TechnologyReference {
    /**
     * Implicit Constraints:
     *     (C1) Only one technology reference can be marked for pointing to the default type
     *          definition technology.
     *          Ensured by: DSL validator.
     *     (C2) Only technology models that define types can be marked for pointing to the default
                type definition.
     *          technology.
     *          Ensured by: DSL validator.
     */

    boolean isTypeDefinitionTechnology

    refers Import technology

    container Microservice microservice opposite technologyReferences
    container MappedComplexType mappedComplexType opposite technologyReferences
}

/**
 * Represents the interface of a microservice
 */
class Interface {
    /**
     * Implicit Constraints:
     *     (C1) Interface must define or refer to at least one operation.
     *          Ensured by: DSL validator.
     *     (C2) There might be at most one protocol per communication type assigned to an interface.
     *          Ensured by: DSL validator.
     *     (C3) Combination of endpoints' protocols and data formats must be unique.
     *          Ensured by: DSL validator.
     */

    String name
    //String version
    boolean notImplemented = "false"
    Visibility visibility = "NONE"

    //refers Interface[0..1] ^super
    contains Endpoint[] endpoints opposite ^interface
    contains ProtocolSpecification[0..2] protocols
    contains Operation[] operations opposite ^interface
    contains ReferredOperation[] referredOperations opposite ^interface
    contains ImportedServiceAspect[] aspects opposite ^interface

    container Microservice microservice opposite interfaces

    /**
     * TRANSFORMATION ONLY: Get effective protocols of the interface as combinations of Protocol
     * and DataFormat. The effective protocols are primarily determined by the interface's protocol
     * specifications. If a protocol specification for a communication type is missing, the type's
     * effective protocols are taken from the containing microservice.
     */
    op TupleList t_effectiveProtocolSpecifications() {
        val effectiveProtocolSpecifications = if (!protocols.empty)
                protocols.get(0).effectiveProtocolSpecifications(protocols)
            else
                <Map<String, Object>> newArrayList

        // Complement effective protocols with those of the containing microservice
        val protocolSpecificationsCommunicationTypes = protocols
                .map[protocol.importedProtocol.communicationType].toSet
        microservice.t_effectiveProtocolSpecifications.forEach[microserviceEffectiveProtocolTuple |
            val protocol = microserviceEffectiveProtocolTuple.get("protocol") as Protocol
            if (!protocolSpecificationsCommunicationTypes.contains(protocol.communicationType))
                effectiveProtocolSpecifications.add(microserviceEffectiveProtocolTuple)
        ]

        return effectiveProtocolSpecifications
    }

    /**
     * Get parts of the interface for creating a qualified name
     */
    op String[] getQualifiedNameParts() {
        if (name === null || name.empty)
            return newArrayList.asEList

        val nameParts = microservice.qualifiedNameParts
        nameParts.addAll(name)
        nameParts.asEList
    }

    /**
     * Build qualified name from qualified name parts
     */
    op String buildQualifiedName(String separator) {
        if (separator === null)
            return null

        var String qualifiedName = ""
        for (part : qualifiedNameParts)
            qualifiedName += separator + part
        // Remove leading separator
        if (!qualifiedName.empty)
            qualifiedName = qualifiedName.substring(separator.length)
        return qualifiedName
    }

    /**
     * Get effective visibility
     */
    derived Visibility effectiveVisibility get {
        if (microservice === null)
            return null

        val serviceVisibility = microservice.effectiveVisibility

        /*
         * The effective visibility depends on the effective visibility of the microservice. In
         * general, the interface's visibility may not be "greater" than the one of the service
         * (public > architecture > internal). Otherwise, null will be returned as the interface's
         * effective visibility. If the interface does not exhibit an explicit visibility, the
         * visibility of the service is "inherited". This, however, is not the case if the service
         * does not have a visibility, too, or if it's visibility is internal. In the first case,
         * architecture is the default visibility. In the latter case, the "internal", i.e., not-
         * usable-by-modeler, visibility "visible in service model" is returned.
         */
        switch (serviceVisibility) {
            case Visibility.INTERNAL:
                if (visibility === Visibility.NONE)
                    return Visibility.IN_MODEL
                else if (visibility === Visibility.INTERNAL)
                    return visibility

            case Visibility.ARCHITECTURE:
                if (visibility === Visibility.NONE)
                    return serviceVisibility
                else if (visibility === Visibility.INTERNAL ||
                    visibility === Visibility.ARCHITECTURE)
                    return visibility

            case Visibility.PUBLIC:
                if (visibility === Visibility.NONE)
                    return serviceVisibility
                else if (visibility === Visibility.INTERNAL ||
                    visibility === Visibility.ARCHITECTURE ||
                    visibility === Visibility.PUBLIC)
                    return visibility

            default:
                return null
        }

        return null
    }

    /**
     * Convenience method to check if an interface is effectively implemented
     */
    derived boolean effectivelyImplemented get {
        return !notImplemented && operations.exists[!notImplemented]
    }

    /**
     * Convenience method to check if an interface is effectively marked as being internal
     */
    derived boolean effectivelyInternal get {
        return effectiveVisibility === Visibility.INTERNAL
    }
}

/**
 * Represents an operation within an interface of a microservice
 */
class Operation {
    /**
     * Implicit Constraints:
     *     (C1) There might be at most one protocol per communication type assigned to an operation.
     *          Ensured by: DSL validator.
     *     (C2) Combination of endpoints' protocols and data formats must be unique.
     *          Ensured by: DSL validator.
     */

    String name
    boolean notImplemented = "false"
    Visibility visibility = "NONE"

    contains ApiOperationComment[0..1] apiOperationComment opposite operation
    contains Endpoint[] endpoints opposite operation
    contains ProtocolSpecification[0..2] protocols
    contains Parameter[] parameters opposite operation
    contains ImportedServiceAspect[] aspects opposite operation

    container Interface ^interface opposite operations

    /**
     * TRANSFORMATION ONLY: Get effective protocols of the operation as combinations of Protocol
     * and DataFormat. The effective protocols are primarily determined by the operation's protocol
     * specifications. If a protocol specification for a communication type is missing, the type's
     * effective protocols are taken from the containing interface.
     */
    op TupleList t_effectiveProtocolSpecifications() {
       val effectiveProtocolSpecifications = if (!protocols.empty)
                protocols.get(0).effectiveProtocolSpecifications(protocols)
            else
                <Map<String, Object>> newArrayList

        // Complement effective protocols with those of the containing interface
        val protocolSpecificationsCommunicationTypes = protocols
                .map[protocol.importedProtocol.communicationType].toSet
        interface.t_effectiveProtocolSpecifications.forEach[microserviceEffectiveProtocolTuple |
            val protocol = microserviceEffectiveProtocolTuple.get("protocol") as Protocol
            if (!protocolSpecificationsCommunicationTypes.contains(protocol.communicationType))
                effectiveProtocolSpecifications.add(microserviceEffectiveProtocolTuple)
        ]

        return effectiveProtocolSpecifications
    }

    /**
     * Get parts of the operation for creating a qualified name
     */
    op String[] getQualifiedNameParts() {
        if (name === null || name.empty)
            return newArrayList.asEList

        val nameParts = interface.qualifiedNameParts
        nameParts.addAll(name)
        nameParts.asEList
    }

    /**
     * Build qualified name from qualified name parts
     */
    op String buildQualifiedName(String separator) {
        if (separator === null)
            return null

        var String qualifiedName = ""
        for (part : qualifiedNameParts)
            qualifiedName += separator + part
        // Remove leading separator
        if (!qualifiedName.empty)
            qualifiedName = qualifiedName.substring(separator.length)
        return qualifiedName
    }

    /**
     * Check if the operation is indirectly not implemented, because its container, i.e., interface,
     * is already marked as being not implemented
     */
    derived boolean notImplementedByContainer get {
        if (interface === null)
            return false

        return interface.notImplemented
    }

    /**
     * Check, if an operation is effectively not implemented, either directly or indirectly, i.e.,
     * because its interface is already marked as being not implemented
     */
    derived boolean effectivelyNotImplemented get {
        return notImplemented || notImplementedByContainer
    }

    /**
     * Get effective visibility
     */
    derived Visibility effectiveVisibility get {
        if (interface === null)
            return null

        val interfaceVisibility = interface.effectiveVisibility

        // The interface's visibility is null if the combination of service and interface visibility
        // is invalid, which makes the operation's state of visibility invalid, too
        if (interfaceVisibility === null)
            return null

        /*
         * The effective visibility depends on the effective visibility of the interface. In
         * general, the operation's visibility may not be "greater" than the one of the interface
         * (public > architecture > internal). Otherwise, null will be returned as the interface's
         * effective visibility. If the operation does not exhibit an explicit visibility, the
         * visibility of the interface is "inherited". This, however, is not the case if the
         * interface does not have a a visibility, too. In this case, architecture is the default
         * visibility.
         */
        switch (interfaceVisibility) {
            case Visibility.IN_MODEL,
            case Visibility.INTERNAL:
                if (visibility === Visibility.NONE)
                    return interfaceVisibility
                else if (visibility === Visibility.INTERNAL)
                    return visibility

            case Visibility.ARCHITECTURE:
                if (visibility === Visibility.NONE)
                    return interfaceVisibility
                else if (visibility === Visibility.INTERNAL ||
                    visibility === Visibility.ARCHITECTURE)
                    return visibility

            case Visibility.PUBLIC:
                if (visibility === Visibility.NONE)
                    return interfaceVisibility
                else if (visibility === Visibility.INTERNAL ||
                    visibility === Visibility.ARCHITECTURE ||
                    visibility === Visibility.PUBLIC)
                    return visibility

            default:
                return null
        }

        return null
    }

    /**
     * Convenience method to check if an interface is effectively marked as being internal
     */
    derived boolean effectivelyInternal get {
        return effectiveVisibility === Visibility.INTERNAL
    }
}

/**
 * API comment for an operation
 */
class ApiOperationComment {
    String comment

    contains ApiParameterComment[] parameterComments opposite operationComment

    container Operation operation opposite apiOperationComment
}

/**
 * API comment for an operation's parameter
 */
class ApiParameterComment {
    String comment
    boolean required

    refers Parameter parameter

    container ApiOperationComment operationComment opposite parameterComments
}

/**
 * Represents an operation to which an interface other than its defining interface refers. Used for
 * interface mashups.
 */
class ReferredOperation {
    /**
     * Implicit Constraints:
     *     (C1) There might be at most one protocol per communication type assigned to a referred
     *          operation.
     *          Ensured by: DSL validator.
     *     (C2) Combination of endpoints' protocols and data formats must be unique.
     *          Ensured by: DSL validator.
     */

    refers Operation operation
    contains Endpoint[] endpoints opposite referredOperation
    contains ProtocolSpecification[0..2] protocols
    contains ImportedServiceAspect[] aspects opposite referredOperation

    container Interface ^interface opposite referredOperations

    /**
     * TRANSFORMATION ONLY: Get effective protocols of the referred operation as combinations of
     * Protocol and DataFormat. The effective protocols are primarily determined by the referred
     * operations _own_ (i.e., _not_ the operation it refers to) protocol specifications. If a
     * protocol specification for a communication type is missing, the type's effective protocols
     * are taken from the interface that surrounds the referred operation (i.e., _not_ the interface
     * of the operation being referred to).
     */
    op TupleList t_effectiveProtocolSpecifications() {
        val effectiveProtocolSpecifications = if (!protocols.empty)
                protocols.get(0).effectiveProtocolSpecifications(protocols)
            else
                <Map<String, Object>> newArrayList

        // Complement effective protocols with those of the containing interface
        val protocolSpecificationsCommunicationTypes = protocols
                .map[protocol.importedProtocol.communicationType].toSet
        interface.t_effectiveProtocolSpecifications.forEach[microserviceEffectiveProtocolTuple |
            val protocol = microserviceEffectiveProtocolTuple.get("protocol") as Protocol
            if (!protocolSpecificationsCommunicationTypes.contains(protocol.communicationType))
                effectiveProtocolSpecifications.add(microserviceEffectiveProtocolTuple)
        ]

        return effectiveProtocolSpecifications
    }

    /**
     * Get parts of the referred operation for creating a qualified name
     */
    op String[] getQualifiedNameParts() {
        if (operation.name === null || operation.name.empty)
            return newArrayList.asEList

        val nameParts = interface.qualifiedNameParts
        nameParts.addAll(operation.name)
        nameParts.asEList
    }

    /**
     * Build qualified name from qualified name parts
     */
    op String buildQualifiedName(String separator) {
        if (separator === null)
            return null

        var String qualifiedName = ""
        for (part : qualifiedNameParts)
            qualifiedName += separator + part
        // Remove leading separator
        if (!qualifiedName.empty)
            qualifiedName = qualifiedName.substring(separator.length)
        return qualifiedName
    }
}

class Parameter {
    /**
     * Implicit Constraints:
     *     (C1) Must have exactly one type, either imported or primitive.
     *          Ensured by: DSL grammar.
     *     (C2) Imported types may only come from a data or technology model.
     *          Ensured by: DSL scope provider.
     *     (C3) Import aliases for the initializing operation can only originate from imports of the
     *          concepts required by the parameter operation's microservice.
     *          Ensured by: DSL scope provider.
     *     (C4) Initializing operations can only originate from the list of directly or indirectly
     *          required operations of the microservice and they need to exhibit basic
     *          "initializability" (see the checking operation below).
     *          Ensured by: DSL scope provider.
     */

    String name
    ExchangePattern exchangePattern = "IN"
    CommunicationType communicationType
    boolean communicatesFault = "false"
    boolean optional = "false"

    contains PossiblyImportedOperation[0..1] initializedByOperation  opposite initializedParameter
    contains ImportedType[0..1] importedType
    contains PrimitiveType[0..1] primitiveType
    contains ImportedServiceAspect[] aspects opposite parameter
    // This property encapsulates the information from the Mapping DSL, which allows to enrich (and/
    // or map) single data/enumeration fields (and/or their types) of a parameter's complex type
    // with (to) technology-specific information (type)
    contains MappedField[] mappedFields opposite parameter

    container Operation operation opposite parameters

    /**
     * Get parts of the parameter for creating a qualified name
     */
    op String[] getQualifiedNameParts() {
        if (name === null || name.empty)
            return newArrayList.asEList

        val nameParts = operation.qualifiedNameParts
        nameParts.addAll(name)
        nameParts.asEList
    }

    /**
     * Build qualified name from qualified name parts
     */
    op String buildQualifiedName(String separator) {
        if (separator === null)
            return null

        var String qualifiedName = ""
        for (part : qualifiedNameParts)
            qualifiedName += separator + part
        // Remove leading separator
        if (!qualifiedName.empty)
            qualifiedName = qualifiedName.substring(separator.length)
        return qualifiedName
    }

    /**
     * Check if a parameter is _basically_ initializable by a given operation. This basic check does
     * not include the comparatively "expensive" type compatibility checking, but only those formal
     * checks that are based on direct characteristics of the parameter and the initializing
     * operation.
     */
    op boolean basicallyInitializableBy(Operation initializingOperation) {
        if (operation === null ||
            operation.interface === null ||
            operation.interface.microservice === null)
            return false

        if (initializingOperation === null ||
            initializingOperation.interface === null ||
            initializingOperation.interface.microservice === null)
            return false

        // Parameter can only be initialized if it has an "incoming" exchange pattern
        if (exchangePattern !== ExchangePattern.IN &&
            exchangePattern !== ExchangePattern.INOUT)
            return false

        // Operation cannot initialize its own parameters
        if (initializingOperation == operation)
            return false

        // An operation that is not implemented cannot initialize a parameter
        if (initializingOperation.effectivelyNotImplemented)
            return false

        // Internal operations can only initialize a parameter if they are defined in the same
        // microservice
        val thisMicroservice = operation.interface.microservice
        val initializingMicroservice = initializingOperation.interface.microservice
        val initializingOperationFromSameMicroservice = thisMicroservice == initializingMicroservice

        if (initializingOperation.effectivelyInternal && !initializingOperationFromSameMicroservice)
            return false

        // An operation to initialize a parameter must have at least one "outgoing" parameter
        val operationHasOutgoingParameters = initializingOperation.parameters.exists[
                exchangePattern === ExchangePattern.INOUT ||
                exchangePattern === ExchangePattern.OUT
            ]
        if (!operationHasOutgoingParameters)
            return false

        return true
    }

    /**
     * Get effective type of parameter, i.e., the primitive or imported type (null otherwise)
     */
    op Type getEffectiveType() {
        if (primitiveType !== null)
            return primitiveType
        else if (importedType !== null && importedType.^type !== null)
            return importedType.^type
        else
            return null
    }

    /**
     * Check if the effective type of the parameter is technology-specific
     */
    op boolean isTechnologySpecificEffectiveType() {
        val effectiveType = getEffectiveType()
        if (effectiveType === null)
            return false

        return effectiveType instanceof TechnologySpecificDataStructure ||
            effectiveType instanceof TechnologySpecificListType ||
            effectiveType instanceof TechnologySpecificPrimitiveType
    }

    /**
     * Get parts of the parameter for creating a qualified name depending on its effective type
     */
    op String[] getEffectiveTypeQualifiedNameParts() {
        val effectiveType = effectiveType

        if (effectiveType === null)
            return null

        // Technology-specific primitive type
        else if (effectiveType instanceof TechnologySpecificPrimitiveType)
            return effectiveType.qualifiedNameParts

        // Primitive type
        else if (effectiveType instanceof PrimitiveType) {
            val qualifiedNameParts = <String> newArrayList
            qualifiedNameParts.add(effectiveType.typeName)
            return qualifiedNameParts.asEList
        }

        // Complex type
        else if (effectiveType instanceof ComplexType)
            return effectiveType.qualifiedNameParts

        return null
    }
}

/**
 * A microservice possibly imported from another service model
 */
class PossiblyImportedMicroservice {
    refers Import[0..1] ^import
    refers Microservice microservice

    container Microservice requiringMicroservice opposite requiredMicroservices
}

/**
 * An interface possibly imported from another service model
 */
class PossiblyImportedInterface {
    refers Import[0..1] ^import
    refers Interface ^interface

    container Microservice requiringMicroservice opposite requiredInterfaces

    /**
     * Flag to indicate if the interface is required by a microservice
     */
    derived boolean required get {
        return requiringMicroservice !== null
    }

    /**
     * Flag to indicate if the interface is already required, because its container, i.e., its
     * containing microservice, is required
     */
    derived boolean requiredByContainer get {
        if (interface === null || !required)
            return false

        // Check if the interface's microservice is in the list of the required microservices
        if (requiringMicroservice.requiredMicroservices !== null &&
            requiringMicroservice.requiredMicroservices.map[it.microservice]
                .contains(interface.microservice))
            return true

        return false
    }
}

/**
 * An operation possibly imported from another service model
 */
class PossiblyImportedOperation {
    refers Import[0..1] ^import
    refers Operation operation

    container Microservice requiringMicroservice opposite requiredOperations
    container Parameter initializedParameter opposite initializedByOperation

    /**
     * Flag to indicate if the operation is required by a microservice
     */
    derived boolean required get {
        return requiringMicroservice !== null
    }

    /**
     * Flag to indicate if the operation is already required, because its interface is required
     */
    derived boolean requiredByInterface get {
        if (operation === null ||
            !required ||
            requiringMicroservice.requiredInterfaces === null)
            return false

        // Check if the operation's interface is in the list of the required interfaces
        if (requiringMicroservice.requiredInterfaces.map[it.interface]
                .contains(operation.interface))
            return true

        return false
    }

    /**
     * Flag to indicate if the operation is already required, because its microservice is required
     */
    derived boolean requiredByMicroservice get {
        if (operation === null ||
            !required ||
            requiringMicroservice.requiredMicroservices === null ||
            operation.interface === null)
            return false

        // Check if the operation interface's microservice is in the list of the required
        // microservices
        if (requiringMicroservice.requiredMicroservices.map[it.microservice]
                .contains(operation.interface.microservice))
            return true

        return false
    }

    /**
     * Flag to indicate if the operation is already required, because its containers, i.e., its
     * interface or indirectly containing microservice, is required
     */
    derived boolean requiredByContainer get {
        return requiredByInterface || requiredByMicroservice
    }
}

/**
 * Represents a type imported from a data or technology model
 */
class ImportedType {
    refers Import ^import
    refers Type ^type
}

/**
 * Represents a protocol and data format imported from a technology model
 */
class ImportedProtocolAndDataFormat {
    /**
     * Implicit Constraints:
     *     (C1) Data format must match protocol as specified in the technology model.
     *          Ensured by: DSL scope provider.
     *     (C2) Import must match annotated technology of parent microservice.
     *          Ensured by: DSL scope provider.
     */
    refers Import ^import
    refers Protocol importedProtocol
    refers DataFormat[0..1] dataFormat

    container ProtocolSpecification specification opposite protocol
    container Endpoint endpoint opposite protocols
}

/**
 * Protocol specification that combines a communication type with an imported protocol. Used to
 * specify, e.g., the default asynchronous and/or synchronous protocol of services, interfaces, and
 * operations.
 */
class ProtocolSpecification {
    CommunicationType communicationType

    contains ImportedProtocolAndDataFormat protocol opposite specification

    /**
     * Reusable helper method to determine effective protocol specifications from a list of
     * ProtocolSpecification instances as combinations of Protocol and DataFormat. In case a
     * ProtocolSpecification instance does not specify an explicit or implicit (i.e., default) data
     * format, the effective protocol specifications correspond to the ProtocolSpecification's
     * Protocol being combined with all of its DataFormats.
     */
    op TupleList effectiveProtocolSpecifications(ProtocolSpecification[] specifications) {
        if (specifications === null)
            return null

        val results = <Map<String, Object>> newArrayList
        specifications.forEach[specification |
            val protocol = specification.protocol
            val importedProtocol = protocol.importedProtocol
            // Protocol specification has explicit data format
            if (protocol.dataFormat !== null) {
                val entry = <String, Object> newHashMap
                entry.put("protocol", importedProtocol)
                entry.put("dataFormat", protocol.dataFormat)
                entry.put("import", protocol.import)
                results.add(entry)

            // Protocol specification has default (implicit) data format
            } else if (importedProtocol.defaultFormat !== null) {
                val entry = <String, Object> newHashMap
                entry.put("protocol", importedProtocol)
                entry.put("dataFormat", importedProtocol.defaultFormat)
                entry.put("import", protocol.import)
                results.add(entry)

            // Protocol specification lacks any kind data format
            } else {
                // Combine the specification's protocol with all of the protocol's data formats
                importedProtocol.dataFormats.forEach[dataFormat |
                    val entry = <String, Object> newHashMap
                    entry.put("protocol", importedProtocol)
                    entry.put("dataFormat", dataFormat)
                    entry.put("import", protocol.import)
                    results.add(entry)
                ]
            }
        ]
        return results
    }
}

/**
 * Represents an endpoint, i.e., the assignment of physical addresses, e.g., URIs with a protocol,
 * e.g., REST/JSON.
 */
class Endpoint {
    /**
     * Implicit Constraints:
     *     (C1) Addresses must be unique.
     *          Ensured by: DSL validator.
     */

    String[1..*] addresses

    contains ImportedProtocolAndDataFormat[1..*] protocols opposite endpoint

    container Microservice microservice opposite endpoints
    container Interface ^interface opposite endpoints
    container Operation operation opposite endpoints
    container ReferredOperation referredOperation opposite endpoints
}

/**
 * Metamodel concept for service aspects being imported from a technology model
 */
class ImportedServiceAspect {
    /**
     * Implicit Constraints:
     *     (C1) An aspect may not be assigned twice to a concept instance.
     *          Ensured by: DSL validator.
     *     (C2) A single property value may only be assigned if the aspect has exactly one property.
     *          Ensured by: DSL validator.
     *     (C3) Property values must match the type of the aspect property as defined in the
     *          technology being assigned to the parent microservice mapping.
     *          Ensured by: DSL validator.
     *     (C4) Mandatory properties must have values assigned.
     *          Ensured by: DSL validator.
     *     (C5) Aspect may only be assigned to a concept if all of its selectors match.
     *          Ensured by: DSL scope provider.
     */

    refers Import ^import
    refers ServiceAspect importedAspect
    contains PrimitiveValue singlePropertyValue
    contains TechnologySpecificPropertyValueAssignment[] values

    container Microservice microservice opposite aspects
    container Interface ^interface opposite aspects
    container Operation operation opposite aspects
    container ReferredOperation referredOperation opposite aspects
    container Parameter parameter opposite aspects
    container MappedComplexType mappedComplexType opposite aspects
    container MappedField mappedField opposite aspects
    container MappedDataOperation mappedDataOperation opposite aspects
    container MappedDataOperationReturnType mappedDataOperationReturnType opposite aspects
    container MappedDataOperationParameter mappedDataOperationParameter opposite aspects
}

type TupleList wraps List<Map<String, Object>>
type MicroserviceImportMap wraps Map<Microservice, Import>
type DefaultProtocols wraps Map<CommunicationType, Pair<Import, Protocol>>