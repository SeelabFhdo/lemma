"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See LICENSE.md in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _Lazy_value;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Lazy = void 0;
class Lazy {
    constructor(valueFactory) {
        this.valueFactory = valueFactory;
        /* private */ _Lazy_value.set(this, void 0);
    }
    get value() {
        if (__classPrivateFieldGet(this, _Lazy_value, "f") === undefined) {
            __classPrivateFieldSet(this, _Lazy_value, this.valueFactory(), "f");
        }
        return __classPrivateFieldGet(this, _Lazy_value, "f");
    }
    hasValue() {
        return (__classPrivateFieldGet(this, _Lazy_value, "f") !== undefined);
    }
    clear() {
        __classPrivateFieldSet(this, _Lazy_value, undefined, "f");
    }
}
exports.Lazy = Lazy;
_Lazy_value = new WeakMap();
//# sourceMappingURL=Lazy.js.map