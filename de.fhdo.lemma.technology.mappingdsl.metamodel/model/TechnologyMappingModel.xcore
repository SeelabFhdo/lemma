package de.fhdo.lemma.technology.mapping

import de.fhdo.lemma.data.ComplexType
import de.fhdo.lemma.data.DataField
import de.fhdo.lemma.data.DataOperation
import de.fhdo.lemma.data.DataOperationParameter
import de.fhdo.lemma.data.EnumerationField
import de.fhdo.lemma.data.PrimitiveValue
import de.fhdo.lemma.data.Type
import de.fhdo.lemma.service.Import
import de.fhdo.lemma.service.Interface
import de.fhdo.lemma.service.Microservice
import de.fhdo.lemma.service.Operation
import de.fhdo.lemma.service.Parameter
import de.fhdo.lemma.service.ReferredOperation
import de.fhdo.lemma.service.TechnologyReference
import de.fhdo.lemma.technology.CommunicationType
import de.fhdo.lemma.technology.DataFormat
import de.fhdo.lemma.technology.Protocol
import de.fhdo.lemma.technology.ServiceAspect
import de.fhdo.lemma.technology.TechnologySpecificPrimitiveType
import de.fhdo.lemma.technology.TechnologySpecificPropertyValueAssignment
import de.fhdo.lemma.utils.LemmaUtils
import de.fhdo.lemma.technology.Technology
import java.util.List

/**
 * Metamodel for technology mappings that provide an alternative to specifying technology in service
 * models. It aims to preserve the readability of service models and to keep them
 * technology-agnostic.
 *
 * @author <a href="mailto:florian.rademacher@fh-dortmund.de">Florian Rademacher</a>
 */
class TechnologyMapping {
    /**
     * Implicit Constraints:
     *     (C1) Imported files must be unique.
     *          Ensured by: DSL validator.
     *     (C2) A microservice may only be mapped once.
     *          Ensured by: DSL validator.
     */

    contains Import[1..*] imports
    contains ComplexTypeMapping[] typeMappings opposite mappingModel
    contains MicroserviceMapping[] serviceMappings opposite mappingModel

    /**
     * Get all mapped interfaces of all mapped microservices
     */
    op InterfaceMapping[] getMappedInterfaces() {
        return serviceMappings.map[interfaceMappings].flatten.toList.asEList
    }

    /**
     * Get all operations of all mapped microservices
     */
    op OperationMapping[] getMappedOperations() {
        return serviceMappings.map[operationMappings].flatten.toList.asEList
    }

    /**
     * Get all complex parameter mappings of all mapped operations
     */
    op ComplexParameterMapping[] getComplexParameterMappings() {
        val mappings = <ComplexParameterMapping>newArrayList
        getMappedOperations().map[parameterMappings].flatten
            .forEach[if (it instanceof ComplexParameterMapping) mappings.add(it)]
        return mappings.asEList
    }

    /**
     * Get all mapped referred operations of all mapped microservices
     */
    op ReferredOperationMapping[] getMappedReferredOperations() {
        return serviceMappings.map[referredOperationMappings].flatten.toList.asEList
    }
}

/**
 * Mapping for complex types
 */
class ComplexTypeMapping {
    // TRANSFORMATION ONLY: Source model URI of the data model that defines the mapped complex type
    String t_sourceModelUri

    contains TechnologyReference[] technologyReferences
    contains ImportedComplexTypeToMap ^type opposite typeMapping
    contains TechnologySpecificFieldMapping[] fieldMappings opposite typeMapping
    contains DataOperationMapping[] operationMappings opposite typeMapping
    contains TechnologySpecificImportedServiceAspect[] aspects opposite typeMapping

    container TechnologyMapping mappingModel opposite typeMappings

    /**
     * Get all technology references that point to technology models defining types
     */
    op TechnologyReference[] getAllTypeDefinitionTechnologyReferences() {
        return technologyReferences.filter[
            val resource = technology.eResource
            val importURI = technology.importURI
            val technologyModel = LemmaUtils.getImportedModelRoot(resource, importURI, Technology)
            !technologyModel.primitiveTypes.empty ||
            !technologyModel.collectionTypes.empty ||
            !technologyModel.dataStructures.empty
        ].toEList
    }

    /**
     * Get import of type definition technology. If no explicit technology reference was marked as
     * pointing to the default type definition technology, this corresponds to the first technology
     * import in the list of type definition technology imports. This operation should only be
     * executed if the model had been validated to refer to one type definition technology at most.
     */
    op Import getTypeDefinitionTechnologyImport() {
        val explicitTypeDefinitionTechnologyImport = technologyReferences
            .findFirst[isIsTypeDefinitionTechnology]
            ?.technology
        if (explicitTypeDefinitionTechnologyImport !== null)
            return explicitTypeDefinitionTechnologyImport

        // No technology explicitly marked as being the one with the default type definitions. We
        // then take the first one with type definitions, if any.
        val allTypeDefinitionTechnologyReferences = getAllTypeDefinitionTechnologyReferences()
        return if (!allTypeDefinitionTechnologyReferences.empty)
                allTypeDefinitionTechnologyReferences.get(0).technology
            else
                null
    }

    /**
     * Get type definition technology
     */
    op Technology getTypeDefinitionTechnology() {
        val typeDefinitionTechnologyImport = getTypeDefinitionTechnologyImport()
        return if (typeDefinitionTechnologyImport !== null)
                LemmaUtils.getImportedModelRoot(
                    typeDefinitionTechnologyImport.eResource,
                    typeDefinitionTechnologyImport.importURI,
                    Technology
                )
            else
                null
    }
}

/**
 * Represents an imported complex type that shall be mapped
 */
class ImportedComplexTypeToMap {
    refers Import serviceModelImport
    refers Import dataModelImport
    refers ComplexType ^type

    container ComplexTypeMapping typeMapping opposite ^type
}

/**
 * Technology mapping for microservices
 */
class MicroserviceMapping {
    /**
     * Implicit Constraints:
     *     (C1) Communication types of mapped protocol specifications must be unique.
     *          Ensured by: DSL validator.
     *     (C2) Endpoint protocols must be unique.
     *          Ensured by: DSL validator.
     *     (C3) Endpoint addresses must be unique.
     *          Ensured by: DSL validator.
     *     (C4) A technology might be assigned exactly once to a microservice mapping.
     *          Ensured by: DSL validator.
     *     (C5) If more than one technology comprises technology-specific types, it must be declared
     *          as the default type definition technology.
     *          Ensured by: DSL validator.
     *     (C6) Assigned technologies may not only define deployment-specific concepts.
     *          Ensured by: DSL validator.
     *     (C7) Type definition technologies of microservices cannot differ in service and mapping
     *          model in case the service model refers to technology-specific types. Otherwise, the
     *          transformation of the mapping to a service model would not be possible, because the
     *          technology-specific types could not be mapped, as both service and mapping model
     *          refer to different technologies for the service.
     *          Ensured by: DSL validator.
     */

    contains TechnologyReference[] technologyReferences
    contains ImportedMicroservice microservice opposite microserviceMapping
    contains TechnologySpecificEndpoint[] endpoints opposite microserviceMapping
    contains TechnologySpecificProtocolSpecification[] protocols
    contains InterfaceMapping[] interfaceMappings opposite microserviceMapping
    contains OperationMapping[] operationMappings opposite microserviceMapping
    contains ReferredOperationMapping[] referredOperationMappings opposite microserviceMapping
    contains TechnologySpecificImportedServiceAspect[] aspects opposite microserviceMapping

    container TechnologyMapping mappingModel opposite serviceMappings

    /**
     * Get all technology references that point to technology models defining types
     */
    op TechnologyReference[] getAllTypeDefinitionTechnologyReferences() {
        return technologyReferences.filter[
            val resource = technology.eResource
            val importURI = technology.importURI
            val technologyModel = LemmaUtils.getImportedModelRoot(resource, importURI, Technology)
            !technologyModel.primitiveTypes.empty ||
            !technologyModel.collectionTypes.empty ||
            !technologyModel.dataStructures.empty
        ].toEList
    }

    /**
     * Get import of type definition technology. If no explicit technology reference was marked as
     * pointing to the default type definition technology, this corresponds to the first technology
     * import in the list of type definition technology imports. This operation should only be
     * executed if the model had been validated to refer to one type definition technology at most.
     */
    op Import getTypeDefinitionTechnologyImport() {
        val explicitTypeDefinitionTechnologyImport = technologyReferences
            .findFirst[isIsTypeDefinitionTechnology]
            ?.technology
        if (explicitTypeDefinitionTechnologyImport !== null)
            return explicitTypeDefinitionTechnologyImport

        // No technology explicitly marked as being the one with the default type definitions. We
        // then take the first one with type definitions, if any.
        val allTypeDefinitionTechnologyReferences = getAllTypeDefinitionTechnologyReferences()
        return if (!allTypeDefinitionTechnologyReferences.empty)
                allTypeDefinitionTechnologyReferences.get(0).technology
            else
                null
    }

    /**
     * Get type definition technology
     */
    op Technology getTypeDefinitionTechnology() {
        val typeDefinitionTechnologyImport = getTypeDefinitionTechnologyImport()
        return if (typeDefinitionTechnologyImport !== null)
                LemmaUtils.getImportedModelRoot(
                    typeDefinitionTechnologyImport.eResource,
                    typeDefinitionTechnologyImport.importURI,
                    Technology
                )
            else
                null
    }
}

/**
 * Represents an imported microservice
 */
class ImportedMicroservice {
    refers Import ^import
    refers Microservice microservice

    container MicroserviceMapping microserviceMapping opposite microservice
}

/**
 * Technology mapping for interfaces
 */
class InterfaceMapping {
    /**
     * Implicit Constraints:
     *     (C1) An interface may only be mapped once.
     *          Ensured by: DSL validator.
     *     (C2) Mapping must not be empty.
     *          Ensured by: DSL validator.
     *     (C3) Communication types of mapped protocol specifications must be unique.
     *          Ensured by: DSL validator.
     *     (C4) Endpoint protocols must be unique.
     *          Ensured by: DSL validator.
     *     (C5) Endpoint addresses must be unique.
     *          Ensured by: DSL validator.
     */

    refers Interface ^interface
    contains TechnologySpecificEndpoint[] endpoints opposite interfaceMapping
    contains TechnologySpecificProtocolSpecification[] protocols
    contains TechnologySpecificImportedServiceAspect[] aspects opposite interfaceMapping

    container MicroserviceMapping microserviceMapping opposite interfaceMappings
}

/**
 * Technology mapping for operations
 */
class OperationMapping {
    /**
     * Implicit Constraints:
     *     (C1) An operation may only be mapped once.
     *          Ensured by: DSL validator.
     *     (C2) Mapping must not be empty.
     *          Ensured by: DSL validator.
     *     (C3) Communication types of mapped protocol specifications must be unique.
     *          Ensured by: DSL validator.
     *     (C4) Endpoint protocols must be unique.
     *          Ensured by: DSL validator.
     *     (C5) Endpoint addresses must be unique.
     *          Ensured by: DSL validator.
     *     (C6) A parameter may be mapped only once.
     *          Ensured by: DSL validator.
     */

    refers Operation operation
    contains TechnologySpecificEndpoint[] endpoints opposite operationMapping
    contains TechnologySpecificProtocolSpecification[] protocols
    contains ParameterMapping[] parameterMappings opposite operationMapping
    contains TechnologySpecificImportedServiceAspect[] aspects opposite operationMapping

    container MicroserviceMapping microserviceMapping opposite operationMappings
}

/**
 * Technology mapping for referred operations
 */
class ReferredOperationMapping {
    /**
     * Implicit Constraints:
     *     (C1) An operation may only be mapped once.
     *          Ensured by: DSL validator.
     *     (C2) Mapping must not be empty.
     *          Ensured by: DSL validator.
     *     (C3) Communication types of mapped protocol specifications must be unique.
     *          Ensured by: DSL validator.
     *     (C4) Endpoint protocols must be unique.
     *          Ensured by: DSL validator.
     *     (C5) Endpoint addresses must be unique.
     *          Ensured by: DSL validator.
     */

    refers ReferredOperation operation
    contains TechnologySpecificEndpoint[] endpoints opposite referredOperationMapping
    contains TechnologySpecificProtocolSpecification[] protocols
    contains TechnologySpecificImportedServiceAspect[] aspects opposite referredOperationMapping

    container MicroserviceMapping microserviceMapping opposite referredOperationMappings
}

/**
 * Abstract superclass for technology mapping of operation parameters
 */
abstract class ParameterMapping {
    /**
     * Implicit Constraints:
     *     (C1) A parameter may be mapped only once.
     *          Ensured by: DSL validator.
     */

    refers Parameter parameter
    contains TechnologySpecificImportedServiceAspect[] aspects opposite parameterMapping

    container OperationMapping operationMapping opposite parameterMappings
}

/**
 * Technology mapping for primitively typed parameters
 */
class PrimitiveParameterMapping extends ParameterMapping {
    refers Import technology
    refers TechnologySpecificPrimitiveType primitiveType
}

/**
 * Technology mapping for complexly typed parameters
 */
class ComplexParameterMapping extends ParameterMapping {
    /**
     * Implicit Constraints:
     *     (C1) Maps either a technology-specific complex type directly or individual data fields.
     *          Ensured by: DSL scope provider.
     */

    refers Import technology
    refers ComplexType technologySpecificComplexType
    contains TechnologySpecificFieldMapping[] fieldMappings opposite parameterMapping
}

/**
 * Technology mapping for data or enumeration fields
 */
class TechnologySpecificFieldMapping {
    /**
     * Implicit Constraints:
     *     (C1) Enumeration fields cannot exhibit mapped types.
     *          Ensured by: DSL validator.
     */

    refers Import[0..1] technology
    refers Type[0..1] ^type
    refers EnumerationField[0..1] enumerationField
    refers DataField[0..1] dataField
    contains TechnologySpecificImportedServiceAspect[] aspects opposite fieldMapping

    container ComplexTypeMapping typeMapping opposite fieldMappings
    container ComplexParameterMapping parameterMapping opposite fieldMappings

    /**
     * Get effective type of mapped element
     */
    op Type getOriginalTypeOfMappedElement() {
        return if (dataField !== null)
            dataField.effectiveType
        else if (enumerationField !== null)
            enumerationField.enumeration
        else
            return null
    }
}

/**
 * Technology mapping for data operations
 */
class DataOperationMapping {
    /**
     * Implicit Constraints:
     *     (C1) If the original data operation has no return type, the return type may not be mapped
     *          to a new type.
     *          Ensured by: DSL validator.
     */

    refers DataOperation dataOperation
    contains TechnologySpecificImportedServiceAspect[] aspects opposite dataOperationMapping
    contains DataOperationReturnTypeMapping[0..1] returnTypeMapping opposite operationMapping
    contains DataOperationParameterMapping[] parameterMappings opposite operationMapping

    container ComplexTypeMapping typeMapping opposite operationMappings
}

/**
 * Technology mapping for return types of data operations
 */
class DataOperationReturnTypeMapping {
    /**
     * Implicit Constraints:
     *     (C1) A return type may be mapped only once.
     *          Ensured by: DSL validator.
     */

    refers Import[0..1] technology
    refers Type[0..1] ^type
    contains TechnologySpecificImportedServiceAspect[] aspects
        opposite dataOperationReturnTypeMapping

    container DataOperationMapping operationMapping opposite returnTypeMapping
}

/**
 * Technology mapping for parameters of data operations
 */
class DataOperationParameterMapping {
    /**
     * Implicit Constraints:
     *     (C1) A parameter may be mapped only once.
     *          Ensured by: DSL validator.
     */

    refers DataOperationParameter parameter
    refers Import[0..1] technology
    refers Type[0..1] ^type
    contains TechnologySpecificImportedServiceAspect[] aspects
        opposite dataOperationParameterMapping

    container DataOperationMapping operationMapping opposite parameterMappings
}

/**
 * Metamodel concept which represents a technology-specific protocol specification
 */
class TechnologySpecificProtocolSpecification {
    /**
     * Implicit Constraints:
     *     (C1) Only one protocol per communication type may be mapped.
     *          Ensured by: DSL validator.
     */

    CommunicationType communicationType

    contains TechnologySpecificProtocol technologySpecificProtocol opposite protocolSpecification
}

/**
 * Technology-specific protocol. It differs from the ImportedProtocolAndDataFormat concept of the
 * Service Viewpoint metamodel in that it does not have a reference to an Import, because it always
 * originates from the technology being assigned to the mapped microservice.
 */
class TechnologySpecificProtocol {
    refers Import technology
    refers Protocol protocol
    refers DataFormat[0..1] dataFormat

    container TechnologySpecificProtocolSpecification protocolSpecification
        opposite technologySpecificProtocol
    container TechnologySpecificEndpoint endpoint opposite technologySpecificProtocols
}

/**
 * Default and service-specific basic endpoints
 */
class TechnologySpecificEndpoint {
    /**
     * Implicit Constraints:
     *     (C1) Addresses must be unique.
     *          Ensured by: DSL validator.
     *     (C2) Protocol/data format combinations must be unique.
     *          Ensured by: DSL validator.
     */

    String[1..*] addresses
    contains TechnologySpecificProtocol[1..*] technologySpecificProtocols opposite endpoint

    container MicroserviceMapping microserviceMapping opposite endpoints
    container InterfaceMapping interfaceMapping opposite endpoints
    container OperationMapping operationMapping opposite endpoints
    container ReferredOperationMapping referredOperationMapping opposite endpoints
}

/**
 * Metamodel concept for service aspects being imported from a technology model
 */
class TechnologySpecificImportedServiceAspect {
    /**
     * Implicit Constraints:
     *     (C1) An aspect may not be assigned twice to a concept instance.
     *          Ensured by: DSL validator.
     *     (C2) A single property value may only be assigned if the aspect has exactly one property.
     *          Ensured by: DSL validator.
     *     (C3) Property values must match the type of the aspect property as defined in the
     *          technology being assigned to the parent microservice mapping.
     *          Ensured by: DSL validator.
     *     (C4) Mandatory properties must have values assigned.
     *          Ensured by: DSL validator.
     *     (C5) Aspect may only be assigned to a concept if all of its selectors match.
     *          Ensured by: DSL scope provider.
     */

    refers Import technology
    refers ServiceAspect aspect
    contains PrimitiveValue singlePropertyValue
    contains TechnologySpecificPropertyValueAssignment[] values

    container ComplexTypeMapping typeMapping opposite aspects
    container MicroserviceMapping microserviceMapping opposite aspects
    container InterfaceMapping interfaceMapping opposite aspects
    container OperationMapping operationMapping opposite aspects
    container ReferredOperationMapping referredOperationMapping opposite aspects
    container ParameterMapping parameterMapping opposite aspects
    container TechnologySpecificFieldMapping fieldMapping opposite aspects
    container DataOperationMapping dataOperationMapping opposite aspects
    container DataOperationReturnTypeMapping dataOperationReturnTypeMapping opposite aspects
    container DataOperationParameterMapping dataOperationParameterMapping opposite aspects
}

type DataFieldList wraps List<DataField>