/*
 * generated by Xtext 2.12.0
 */
package de.fhdo.lemma.technology.formatting2

import com.google.inject.Inject
import de.fhdo.lemma.data.PrimitiveType
import de.fhdo.lemma.data.formatting2.DataDslFormatter
import de.fhdo.lemma.technology.Technology
import de.fhdo.lemma.technology.TechnologySpecificDataStructure
import de.fhdo.lemma.technology.TechnologySpecificCollectionType
import de.fhdo.lemma.technology.TechnologySpecificPrimitiveType
import de.fhdo.lemma.technology.services.TechnologyDslGrammarAccess
import org.eclipse.xtext.formatting2.IFormattableDocument

class TechnologyDslFormatter extends DataDslFormatter {

    @Inject extension TechnologyDslGrammarAccess

    def dispatch void format(Technology technology, extension IFormattableDocument document) {
        // TODO: format HiddenRegions around keywords, attributes, cross references, etc.
        for (TechnologySpecificPrimitiveType technologySpecificPrimitiveType : technology.getPrimitiveTypes()) {
            technologySpecificPrimitiveType.format;
        }
        for (TechnologySpecificCollectionType technologySpecificCollectionType : technology.getCollectionTypes()) {
            technologySpecificCollectionType.format;
        }
        for (TechnologySpecificDataStructure technologySpecificDataStructureType : technology.getDataStructures()) {
            technologySpecificDataStructureType.format;
        }
    }

    def dispatch void format(TechnologySpecificPrimitiveType technologySpecificPrimitiveType, extension IFormattableDocument document) {
        // TODO: format HiddenRegions around keywords, attributes, cross references, etc.
        for (PrimitiveType primitiveType : technologySpecificPrimitiveType.getBasicBuiltinPrimitiveTypes()) {
            primitiveType.format;
        }
    }

    // TODO: implement for
}
